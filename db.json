{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/2020-06-17-18-39-53-image.png","path":"images/2020-06-17-18-39-53-image.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/2020-06-17-18-39-53-image.png","path":"images/2020-06-17-18-39-53-image.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-diaspora/source/css/diaspora.css","path":"css/diaspora.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-diaspora/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-diaspora/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-diaspora/source/js/diaspora.js","path":"js/diaspora.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-diaspora/source/js/plugin.js","path":"js/plugin.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-diaspora/source/js/typed.js","path":"js/typed.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-diaspora/source/photoswipe/photoswipe-ui-default.js","path":"photoswipe/photoswipe-ui-default.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-diaspora/source/photoswipe/photoswipe-ui-default.min.js","path":"photoswipe/photoswipe-ui-default.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-diaspora/source/photoswipe/photoswipe.css","path":"photoswipe/photoswipe.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-diaspora/source/photoswipe/photoswipe.min.js","path":"photoswipe/photoswipe.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-diaspora/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-diaspora/source/photoswipe/photoswipe.js","path":"photoswipe/photoswipe.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-diaspora/source/img/cover.jpg","path":"img/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-diaspora/source/img/welcome-cover.jpg","path":"img/welcome-cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-diaspora/source/photoswipe/default-skin/default-skin.css","path":"photoswipe/default-skin/default-skin.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-diaspora/source/photoswipe/default-skin/default-skin.png","path":"photoswipe/default-skin/default-skin.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-diaspora/source/photoswipe/default-skin/default-skin.svg","path":"photoswipe/default-skin/default-skin.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-diaspora/source/photoswipe/default-skin/preloader.gif","path":"photoswipe/default-skin/preloader.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/js/main.min.js","path":"js/main.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/js/search.min.js","path":"js/search.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1592376642835},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1592376642835},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1592376642835},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1592376642836},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1592376642836},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1592376642836},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1592376642836},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1592376642837},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1592376642837},{"_id":"themes/next/_config.yml","hash":"eeebc426889242614ee190a2d5542840cd57167f","modified":1592397256685},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1592376642843},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1592376642839},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1592376642836},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1592376642836},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1592376642836},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1592376642836},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1592376642836},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1592376642836},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1592376642836},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1592376642836},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1592376642836},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1592376642836},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1592376642836},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1592376642832},{"_id":"themes/next/.git/FETCH_HEAD","hash":"28b054added12d6edb72ebf22d2ece860d0e3eab","modified":1592394684870},{"_id":"themes/next/.git/ORIG_HEAD","hash":"8df4d68e6c89f5df6e79d0c664e9003b2f945089","modified":1592394684878},{"_id":"themes/next/.git/config","hash":"3aa58ad32c5b537b7b64d00c59cc2787e74a3fd2","modified":1592376642832},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1592376333600},{"_id":"themes/next/.git/index","hash":"cbe1334561d73d443a4b90fdb2c491f846838aa9","modified":1592395866811},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1592376642844},{"_id":"themes/next/.git/packed-refs","hash":"81ea7750940721d58655d52cb83814521bf3074d","modified":1592376642823},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1592376642837},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1592376642837},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1592376642837},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1592376642837},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1592376642838},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1592376642838},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1592376642838},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1592376642838},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1592376642838},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1592376642840},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1592376642843},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1592376642843},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1592376642843},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1592376642843},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1592376642843},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1592376642843},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1592376642839},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1592376642839},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1592376642839},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1592376642839},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1592376642839},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1592376642839},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1592376642839},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1592376642839},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1592376642839},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1592376642839},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1592376642839},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1592376642839},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1592376642839},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1592376642840},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1592376642840},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1592376642840},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1592376642840},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1592376642840},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1592376642840},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1592376642840},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1592376642840},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1592376642840},{"_id":"source/categories/index.md","hash":"7b9149dd2b9fe7b2ba4371f029b66aa195786940","modified":1592377865662},{"_id":"source/about/index.md","hash":"67df2a0a1acdca7eaa2204302e4c60e6232492ee","modified":1592384553156},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1592376642836},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1592376642836},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1592376642836},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1592376642836},{"_id":"themes/next/.git/logs/HEAD","hash":"ea3abf2c4528dbfb3927c2bf372b94bec42d1340","modified":1592376642832},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1592376333600},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1592376333600},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1592376333600},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1592376333600},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1592376333600},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1592376642843},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1592376642843},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1592376642844},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1592376642844},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1592376642844},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1592376642844},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1592376642844},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1592376642844},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1592376642844},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1592376642844},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1592376642844},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1592376642844},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1592376642844},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1592376642844},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1592376642844},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1592376642844},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1592376642844},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1592376642844},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1592376642844},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1592376642843},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1592376333600},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1592376333600},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1592376333600},{"_id":"source/tags/index.md","hash":"dfce82c10d064c59a277130b77d52849bf786b6a","modified":1592378394206},{"_id":"source/_posts/go-Map声明、访问、遍历.md","hash":"d42f73ea074aa036fdef9cd8308dd47c4748d26a","modified":1592388093541},{"_id":"source/_posts/go-Map与工厂模式、Set实现.md","hash":"480f3dde2b266e84abbd6468db7aab772f27f8ab","modified":1592395763009},{"_id":"source/_posts/go-datatype.md","hash":"c4c5bb29bf71b1a41c7c5b1aa0c63db48aa17e5c","modified":1592388093541},{"_id":"source/_posts/go-字符串.md","hash":"6911aac7f3fa275f172b7d23ddb2048acba1e4bf","modified":1592388093541},{"_id":"source/_posts/go-函数.md","hash":"26b190f552a44fd76bac576261afa19cd59168f8","modified":1592388093541},{"_id":"source/_posts/go-并发.md","hash":"c03a8acee5282211b6fc5f7e1d83ba436101dab8","modified":1592388093541},{"_id":"source/_posts/go-数组和切片.md","hash":"aefef08b36b7494a1a0446924adc7c2735c02f93","modified":1592388093541},{"_id":"source/_posts/java-使用google.zxing生成二维码.md","hash":"367bf11d5d31ea4fcf76c6261822dfe75cc1cae7","modified":1592396567101},{"_id":"source/_posts/go-运算符.md","hash":"d319137cafb2983fe07645ae1a9e6603cdfb61a2","modified":1592388093541},{"_id":"source/_posts/go-条件和循环.md","hash":"f51849c4ba3ca03c18e690792bb75776dc6d5af5","modified":1592388093541},{"_id":"source/_posts/生成微信小程序码.md","hash":"48fb3cfc9f0cf6255c9e1ea25a8ef65731e40429","modified":1592465464864},{"_id":"source/_posts/常用正则表达式.md","hash":"b4dd45d8a811d08dcc577da73474032c40094c24","modified":1592460632808},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1592376642838},{"_id":"source/_posts/go-hello-world.md","hash":"7ee4abc62671e8ccaaf6bb1c9cf5c023ddb54140","modified":1592388093541},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1592376642838},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1592376642838},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1592376642838},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1592376642838},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1592376642838},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1592376642838},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1592376642838},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1592376642839},{"_id":"source/images/2020-06-17-18-39-53-image.png","hash":"b32000e46108ea363c918ae873929dbc5809d572","modified":1592393056555},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1592376642839},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1592376642839},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1592376642839},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1592376642840},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1592376642838},{"_id":"themes/next/layout/_partials/footer.swig","hash":"700c3e7bd449bce51f6faee42c052e13ed5f8b3e","modified":1592376642840},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1592376642841},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1592376642841},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1592376642841},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1592376642841},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1592376642841},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1592376642841},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1592376642842},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1592376333600},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1592376642842},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1592376642840},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1592376642842},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1592376642842},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1592376642840},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1592376642840},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1592376642842},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1592376642844},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1592376642842},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1592376642847},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1592376642848},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1592376642850},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1592376642849},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1592376642849},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1592376642849},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1592376642849},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1592376642849},{"_id":"themes/next/source/js/utils.js","hash":"2c6e6b4d9a592fbb4bf04689524db2cdfcd94ca7","modified":1592376642849},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1592376642843},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1592376642843},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1592376642843},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1592376642843},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1592376642843},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1592376642843},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1592376642843},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1592376642843},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1592376642843},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1592376642843},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1592376642843},{"_id":"themes/next/.git/refs/heads/master","hash":"8df4d68e6c89f5df6e79d0c664e9003b2f945089","modified":1592376642832},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1592376642848},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1592376642848},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1592376642848},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1592376642848},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1592376642848},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1592376642848},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1592376642848},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1592376642849},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1592376642849},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1592376642849},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1592376642849},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1592376642849},{"_id":"themes/next/source/images/favicon.png","hash":"704518c1c13ccd000c39bcadaa56d3bcce184ab1","modified":1592380996480},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1592376642849},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1592376642841},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1592376642841},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1592376642841},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1592376642840},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1592376642841},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1592376642841},{"_id":"themes/next/source/images/2020-06-17-18-39-53-image.png","hash":"b32000e46108ea363c918ae873929dbc5809d572","modified":1592393369281},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1592376642841},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1592376642841},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1592376642841},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1592376642841},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1592376642841},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1592376642841},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1592376642841},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1592376642841},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1592376642842},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1592376642842},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1592376642842},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1592376642842},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1592376642841},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1592376642841},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1592376642842},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1592376642841},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1592376642841},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1592376642841},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1592376642842},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1592376642842},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1592376642842},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1592376642842},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1592376642842},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1592376642842},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1592376642842},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1592376642842},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1592376642842},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1592376642842},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1592376642842},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1592376642842},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1592376642842},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1592376642842},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1592376642842},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1592376642842},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1592376642842},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1592376642842},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1592376642842},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1592376642843},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1592376642843},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1592376642843},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1592376642843},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1592376642843},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1592376642848},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1592376642848},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1592376642848},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1592376642848},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1592376642851},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1592376642848},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1592376642849},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1592376642849},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"ea3abf2c4528dbfb3927c2bf372b94bec42d1340","modified":1592376642832},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1592376642832},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1592376642851},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1592376642844},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1592376642844},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1592376642844},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1592376642845},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1592376642846},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1592376642846},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1592376642846},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1592376642846},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1592376642846},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1592376642846},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1592376642847},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1592395505944},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1592376642847},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1592376642847},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1592376642847},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1592376642847},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1592376642846},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1592376642847},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1592376642846},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1592376642847},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1592376642847},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1592376642847},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1592376642847},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1592376642846},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1592376642847},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1592376642847},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1592376642847},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1592376642847},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1592376642847},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1592376642847},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1592376642847},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1592376642847},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1592376642850},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1592376642850},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"ea3abf2c4528dbfb3927c2bf372b94bec42d1340","modified":1592376642832},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1592376642850},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1592376642850},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1592376642844},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1592376642844},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1592376642844},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1592376642844},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1592376642845},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1592376642845},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1592376642845},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1592376642845},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1592376642845},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1592376642845},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1592376642845},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1592376642845},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1592376642845},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1592376642845},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1592376642845},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1592376642845},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1592376642845},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1592376642845},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1592376642845},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1592376642845},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1592376642845},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1592376642845},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1592376642845},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1592376642845},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1592376642845},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1592376642845},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1592376642845},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1592376642845},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1592376642846},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1592376642845},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1592376642846},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1592376642845},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1592376642846},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1592376642846},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1592376642846},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1592376642846},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1592376642846},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1592376642846},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1592376642846},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1592376642846},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1592376642846},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1592376642846},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1592376642846},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1592376642846},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1592376642846},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1592376642847},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1592376642847},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1592376642846},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1592376642847},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1592376642847},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1592376642847},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1592376642847},{"_id":"themes/next/.git/objects/pack/pack-b753987450ac7d09a45f4c3e93b491e839366c89.idx","hash":"258dbf74adfce279248652bb34296dcdad1115e5","modified":1592376642814},{"_id":"themes/next/.git/objects/pack/pack-b753987450ac7d09a45f4c3e93b491e839366c89.pack","hash":"4d2b5543c1b919f697ea6a230c057b89e7e89a42","modified":1592376642809},{"_id":"public/search.xml","hash":"bbca7fc57010d320555fefea6161b2786ba5132f","modified":1592560637263},{"_id":"public/categories/index.html","hash":"aae1dcb3e95360b2be33accdc7b70249f64c4dea","modified":1592561174850},{"_id":"public/tags/index.html","hash":"5d77e2cfa17dc2553f9e2705237e2f4a63dff68b","modified":1592561174851},{"_id":"public/about/index.html","hash":"dd5ab17da993816bac5357d9ee7eae062e952f00","modified":1592561174851},{"_id":"public/2020/06/17/go-字符串/index.html","hash":"80122c3e98133adcf50c41b05b99eff2ce9cb4c5","modified":1592561174851},{"_id":"public/2020/06/17/go-hello-world/index.html","hash":"46bb3deda20918c6ad1b40fa9da3f7591733964c","modified":1592561174851},{"_id":"public/archives/2020/page/2/index.html","hash":"7357232cb33064aba68d4af121b215fa07121fe3","modified":1592561174851},{"_id":"public/categories/go/index.html","hash":"7b47e4cb423492ddf5821de7d4f8256ce5604658","modified":1592561174852},{"_id":"public/categories/java/index.html","hash":"57698196d5f6f54cb31ca3fffd42b19e3aaed526","modified":1592561174852},{"_id":"public/tags/二维码/index.html","hash":"41f39980ca5e0e9a0ce85ef7ea54a72b86c081af","modified":1592561174852},{"_id":"public/archives/page/2/index.html","hash":"68b712736efcbf1e60d90dcbedf95e5df9e09ecb","modified":1592561174851},{"_id":"public/archives/2020/06/page/2/index.html","hash":"4c297c7b0d20a92d2eeb0a24f8e97da36ee4ee60","modified":1592561174852},{"_id":"public/2020/06/18/生成微信小程序码/index.html","hash":"1af87f27008eeeebc3286ab0fd8a4a21d6fb0fdb","modified":1592561174852},{"_id":"public/2020/06/18/常用正则表达式/index.html","hash":"db419b5312d5303ebb08a7f387f4d69e6beb102c","modified":1592561174853},{"_id":"public/2020/06/17/go-Map声明、访问、遍历/index.html","hash":"f293278b6ba04bb06a4c22157710b509f82a3fa9","modified":1592561174853},{"_id":"public/2020/06/17/go-datatype/index.html","hash":"5be33e2dbbac1b573514cd7a309faf58ee958543","modified":1592561174853},{"_id":"public/2020/06/17/java-使用google.zxing生成二维码/index.html","hash":"020f19ff8d4a2967fe92929a0f6106e4935b3dfb","modified":1592561174853},{"_id":"public/2020/06/17/go-Map与工厂模式、Set实现/index.html","hash":"516854e7c1755d6fcaa17cebbf38c2e151ca08f3","modified":1592561174853},{"_id":"public/2020/06/17/go-运算符/index.html","hash":"9f77051f39f9504459e79600f17502236ebabc86","modified":1592561174853},{"_id":"public/2020/06/17/go-并发/index.html","hash":"b029bc65e943dbfb9f8a039d981421b3e85df2c9","modified":1592561174853},{"_id":"public/index.html","hash":"68df43a5e05dfc8076e2462cf4633c269041cb2b","modified":1592561174853},{"_id":"public/page/2/index.html","hash":"f9634478d4228d366cf84cf8f10009abe33d3b66","modified":1592561174854},{"_id":"public/archives/index.html","hash":"12b4fd26782c44f8d009c5bd5c100d6cd7bed915","modified":1592561174853},{"_id":"public/2020/06/17/go-函数/index.html","hash":"139854f3535c47f96570b2ba24fd2a4b324578a5","modified":1592561174853},{"_id":"public/archives/2020/index.html","hash":"96684060cfe7eb3295dee11f8af366914e4365e2","modified":1592561174853},{"_id":"public/2020/06/17/go-条件和循环/index.html","hash":"e8a1f24c3a880223531786e15c454be291d36481","modified":1592561174853},{"_id":"public/2020/06/17/go-数组和切片/index.html","hash":"d525a4cb1a38535952a6b1760fa78e624349c06c","modified":1592561174853},{"_id":"public/archives/2020/06/index.html","hash":"4b2d9b8d067a6b619166b528fbcbafe656f827c0","modified":1592561174853},{"_id":"public/tags/微信开发/index.html","hash":"dda4fa7f819fa6e72022ebcb4d5d4d12b69df9c4","modified":1592561174852},{"_id":"public/tags/正则表达式/index.html","hash":"1c84cb230c159d4a5b52f1d3ea323a599227c160","modified":1592561174852},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1592532189295},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1592532189295},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1592532189296},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1592532189296},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1592532189296},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1592532189296},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1592532189296},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1592532189296},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1592532189296},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1592532189296},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1592532189296},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1592532189296},{"_id":"public/images/favicon.png","hash":"704518c1c13ccd000c39bcadaa56d3bcce184ab1","modified":1592532189296},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1592532189296},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1592532189296},{"_id":"public/images/2020-06-17-18-39-53-image.png","hash":"b32000e46108ea363c918ae873929dbc5809d572","modified":1592532191169},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1592532191170},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1592532191171},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1592532191196},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1592532191196},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1592532191196},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1592532191196},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1592532191196},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1592532191196},{"_id":"public/js/utils.js","hash":"2c6e6b4d9a592fbb4bf04689524db2cdfcd94ca7","modified":1592532191196},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1592532191196},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1592532191196},{"_id":"public/css/main.css","hash":"08151c0b124619904706092b9b9d91b4d83db126","modified":1592532191196},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1592532191196},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1592532191196},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1592532191196},{"_id":"themes/hexo-theme-diaspora/.gitignore","hash":"711861c1bdc49a4d5c6704a22546dcafc31d4730","modified":1592560586315},{"_id":"themes/hexo-theme-diaspora/LICENSE","hash":"63175a16773044bed84e1778009a54ad03dd5520","modified":1592560586315},{"_id":"themes/hexo-theme-diaspora/README.md","hash":"a99289142b877da1e6203f21eeaed712495369b6","modified":1592560586315},{"_id":"themes/hexo-theme-diaspora/_config.yml","hash":"02769a81e496937f5ad8cc3016eca1baac2348cd","modified":1592560586315},{"_id":"source/_posts/centos安装docker.md","hash":"ea4999eae54adeaffeba63f9efe67b2fdc2d6174","modified":1592552109629},{"_id":"source/_posts/docker-compose安装与使用.md","hash":"69aa3cd870ddc52a0621b83cff6246090c484cd1","modified":1592554947693},{"_id":"source/_posts/hexo博客框架-安装.md","hash":"dc3069d5d07b7f2dccc52e0e9a5a141f789aed9e","modified":1592557422017},{"_id":"themes/hexo-theme-diaspora/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1592560586312},{"_id":"themes/hexo-theme-diaspora/.git/config","hash":"cb6674d7dd034e5afde891de8d6f202d9e830329","modified":1592560586312},{"_id":"themes/hexo-theme-diaspora/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1592560582951},{"_id":"themes/hexo-theme-diaspora/.git/index","hash":"ff23756f975099a0b61f973d412f439d7c35a10a","modified":1592560586322},{"_id":"themes/hexo-theme-diaspora/.git/packed-refs","hash":"75ba266f4907ae9bf00efb0b85afe17f3c0da51d","modified":1592560586312},{"_id":"themes/hexo-theme-diaspora/languages/default.yml","hash":"1b2b75ca9ff3bfeddb596239889b584cdfcecc32","modified":1592560586315},{"_id":"themes/hexo-theme-diaspora/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1592560586315},{"_id":"themes/hexo-theme-diaspora/languages/it.yml","hash":"6ae71000ed039f56572143ffe90da17b95d1a66f","modified":1592560586315},{"_id":"themes/hexo-theme-diaspora/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1592560586315},{"_id":"themes/hexo-theme-diaspora/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1592560586315},{"_id":"themes/hexo-theme-diaspora/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1592560586315},{"_id":"themes/hexo-theme-diaspora/languages/zh-CN.yml","hash":"ccbba6315760755926f5abfe1b98c225a6650581","modified":1592560586315},{"_id":"themes/hexo-theme-diaspora/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1592560586316},{"_id":"themes/hexo-theme-diaspora/layout/archive.ejs","hash":"80aa442d757c082f37590a35a1f8f4f798996b4e","modified":1592560586316},{"_id":"themes/hexo-theme-diaspora/layout/category.ejs","hash":"920114db892fe39fab097c4f65d8ffc9b2a76b69","modified":1592560586316},{"_id":"themes/hexo-theme-diaspora/layout/index.ejs","hash":"61158c6df5bb665aa5fa39f5fba950f23867eef6","modified":1592560586316},{"_id":"themes/hexo-theme-diaspora/layout/layout.ejs","hash":"b9acea1512eba9ae16a6fd7f3f37b9fa3f4a0c95","modified":1592560586316},{"_id":"themes/hexo-theme-diaspora/layout/page.ejs","hash":"ad954fb44615f603674782703a5a7f5b1f24ebf4","modified":1592560586316},{"_id":"themes/hexo-theme-diaspora/layout/post.ejs","hash":"e585d8b4680c52dccfc40ffa6b2c5df515bf20d2","modified":1592560586316},{"_id":"themes/hexo-theme-diaspora/layout/tag.ejs","hash":"e0c36bded984989c864227801dcd289207241f76","modified":1592560586317},{"_id":"themes/hexo-theme-diaspora/scripts/page_title.js","hash":"35dbc39e4edd53b20f5433dc0d1708024049186d","modified":1592560586317},{"_id":"themes/hexo-theme-diaspora/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1592560582951},{"_id":"themes/hexo-theme-diaspora/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1592560582951},{"_id":"themes/hexo-theme-diaspora/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1592560582952},{"_id":"themes/hexo-theme-diaspora/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1592560582952},{"_id":"themes/hexo-theme-diaspora/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1592560582953},{"_id":"themes/hexo-theme-diaspora/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1592560582953},{"_id":"themes/hexo-theme-diaspora/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1592560582953},{"_id":"themes/hexo-theme-diaspora/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1592560582954},{"_id":"themes/hexo-theme-diaspora/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1592560582954},{"_id":"themes/hexo-theme-diaspora/.git/logs/HEAD","hash":"344794527691d2fed73198af721c7f4222f60df4","modified":1592560586312},{"_id":"themes/hexo-theme-diaspora/.github/ISSUE_TEMPLATE/issues-template.md","hash":"34869fddae53c69c2648712d2f82fe9cb6e9cb0d","modified":1592560586315},{"_id":"themes/hexo-theme-diaspora/layout/_partial/categories.ejs","hash":"4a569e3d4e1a0498238aea62abdaf27af96d5a12","modified":1592560586316},{"_id":"themes/hexo-theme-diaspora/layout/_partial/google-analytics.ejs","hash":"4806289a1c3de19a1cc4e6242c82cdd429c3bfe8","modified":1592560586316},{"_id":"themes/hexo-theme-diaspora/layout/_partial/head.ejs","hash":"7f7f2955fb48205673f8fe96293bfc80ea63963a","modified":1592560586316},{"_id":"themes/hexo-theme-diaspora/layout/_partial/list.ejs","hash":"8e03499580aa81ec0b4c8316347b4e3839849007","modified":1592560586316},{"_id":"themes/hexo-theme-diaspora/layout/_partial/mathjax.ejs","hash":"87918a6547489265695cf21e09c35559412c29b1","modified":1592560586316},{"_id":"themes/hexo-theme-diaspora/layout/_partial/menu.ejs","hash":"ace01623958bbbf40207e71ed6ef9da0c46e1326","modified":1592560586316},{"_id":"themes/hexo-theme-diaspora/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1592560586316},{"_id":"themes/hexo-theme-diaspora/layout/_partial/screen.ejs","hash":"2796ef7bc1c2d2dd9fad25b486d6f02475a3fe42","modified":1592560586316},{"_id":"themes/hexo-theme-diaspora/layout/_partial/scripts.ejs","hash":"ecb5fbee97c93ed438650f64d7939c5e9401c11e","modified":1592560586316},{"_id":"themes/hexo-theme-diaspora/layout/_partial/search.ejs","hash":"12210ce0d939650b336f428fb8ba4e40b19b42ae","modified":1592560586316},{"_id":"themes/hexo-theme-diaspora/layout/_partial/tags.ejs","hash":"fd398ab315ef57c8197cd218237ec07dcd92f372","modified":1592560586316},{"_id":"themes/hexo-theme-diaspora/source/css/diaspora.css","hash":"b4828ef890a32ec63e043a7270145ae5dd0ce10b","modified":1592560586317},{"_id":"themes/hexo-theme-diaspora/source/img/favicon.png","hash":"efb938a836c0b69baecdaadb89a94511f9abb299","modified":1592560586318},{"_id":"themes/hexo-theme-diaspora/source/img/logo.png","hash":"26aa13d23a30369b683aab639499f977fe9f8175","modified":1592560586318},{"_id":"themes/hexo-theme-diaspora/source/js/diaspora.js","hash":"2f83d9355feb9356d032760781695b081a579f35","modified":1592560586319},{"_id":"themes/hexo-theme-diaspora/source/js/plugin.js","hash":"0ac6bf36a9a11ca6fad0af1f20e5705bc326abf4","modified":1592560586320},{"_id":"themes/hexo-theme-diaspora/source/js/typed.js","hash":"e817f2a2b12c2da5e76cc1428912fe5900eb100c","modified":1592560586320},{"_id":"themes/hexo-theme-diaspora/source/photoswipe/photoswipe-ui-default.js","hash":"c844cca2f9a9969a810a0fb534063e008424c936","modified":1592560586321},{"_id":"themes/hexo-theme-diaspora/source/photoswipe/photoswipe-ui-default.min.js","hash":"d80b713ca1bab90f27a8af7d8e43563f0fe81860","modified":1592560586321},{"_id":"themes/hexo-theme-diaspora/source/photoswipe/photoswipe.css","hash":"a31fa495095783ef5a84ba4dba0bd6f7de3b07ea","modified":1592560586321},{"_id":"themes/hexo-theme-diaspora/source/photoswipe/photoswipe.min.js","hash":"791703278e7c576b08b67f18404bae9eb8cebfaf","modified":1592560586322},{"_id":"themes/hexo-theme-diaspora/layout/_partial/photoswipe.ejs","hash":"d1d36cf0a2c03ff3c2acbc208fe11cd0afd8b7bd","modified":1592560586316},{"_id":"themes/hexo-theme-diaspora/source/js/jquery.min.js","hash":"3f1b0e9e54af1af2db2c8a639530448723462151","modified":1592560586320},{"_id":"themes/hexo-theme-diaspora/source/photoswipe/photoswipe.js","hash":"30967789eb2a3e1da9927e71f4f3c5339ebed39a","modified":1592560586321},{"_id":"themes/hexo-theme-diaspora/.git/objects/pack/pack-f58755ac6884bca6755c41ed402df0a4b189c978.idx","hash":"14f68b1b6d5b9e5fa9e9fce5526e9c02603b6757","modified":1592560586301},{"_id":"themes/hexo-theme-diaspora/.git/refs/heads/master","hash":"c8ad56adf665e5552317553438061a544d2977bf","modified":1592560586312},{"_id":"themes/hexo-theme-diaspora/layout/_partial/post/article.ejs","hash":"9147c8e00c7ed31fb97e592ed6bcc739a8510fe2","modified":1592560586316},{"_id":"themes/hexo-theme-diaspora/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1592560586316},{"_id":"themes/hexo-theme-diaspora/layout/_partial/post/gitalk.ejs","hash":"d3d7d3cfd57fcfb2ab41ae743569853dd4489098","modified":1592560586316},{"_id":"themes/hexo-theme-diaspora/layout/_partial/post/header.ejs","hash":"6e1bdde001df6c3b97bf4bf0bf7c2c4160f2071c","modified":1592560586316},{"_id":"themes/hexo-theme-diaspora/layout/_partial/post/item.ejs","hash":"17992d3ebcefa840c4bdd5d2de4a7b80c2a7f999","modified":1592560586316},{"_id":"themes/hexo-theme-diaspora/layout/_partial/post/tag.ejs","hash":"c2b4ce7e1d7eed59f4c333915cd431f008f898e3","modified":1592560586316},{"_id":"themes/hexo-theme-diaspora/layout/_partial/post/title.ejs","hash":"33f2a96f17fb1efa354c92aef906d96984abd9ab","modified":1592560586316},{"_id":"themes/hexo-theme-diaspora/source/img/cover.jpg","hash":"dc7103d4c4e05650595712b3fa395b89726df32b","modified":1592560586318},{"_id":"themes/hexo-theme-diaspora/source/img/welcome-cover.jpg","hash":"c393dfeb52aff20a9921c1f56e2ce127683ab35a","modified":1592560586319},{"_id":"themes/hexo-theme-diaspora/source/photoswipe/default-skin/default-skin.css","hash":"5763bd1a8015774f37215359bfcb5edd65d198a6","modified":1592560586320},{"_id":"themes/hexo-theme-diaspora/source/photoswipe/default-skin/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1592560586321},{"_id":"themes/hexo-theme-diaspora/source/photoswipe/default-skin/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1592560586321},{"_id":"themes/hexo-theme-diaspora/source/photoswipe/default-skin/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1592560586321},{"_id":"themes/hexo-theme-diaspora/.git/logs/refs/heads/master","hash":"344794527691d2fed73198af721c7f4222f60df4","modified":1592560586312},{"_id":"themes/hexo-theme-diaspora/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1592560586312},{"_id":"themes/hexo-theme-diaspora/.git/logs/refs/remotes/origin/HEAD","hash":"344794527691d2fed73198af721c7f4222f60df4","modified":1592560586312},{"_id":"themes/hexo-theme-diaspora/.git/objects/pack/pack-f58755ac6884bca6755c41ed402df0a4b189c978.pack","hash":"673a4d1e9223d26eedb691c434d2fe78cd968ed0","modified":1592560586300},{"_id":"public/2020/06/19/hexo博客框架-安装/index.html","hash":"79aa7cba1bfee7ebd584e6de11908225fcaa2765","modified":1592561174852},{"_id":"public/2020/06/19/docker-compose安装与使用/index.html","hash":"896b4bf8adb6a6d650748aea727bc7e34d0a3b44","modified":1592561174852},{"_id":"public/2020/06/19/centos安装docker/index.html","hash":"9be0a8af9bc96d0cc202690154d5b0aff9fa107f","modified":1592561174852},{"_id":"public/categories/linux/index.html","hash":"1b3ddb334e9ea5c390d49f16d7f217ab2e62d583","modified":1592561174852},{"_id":"public/tags/docker/index.html","hash":"697ab5ae6a93fa1ca5449ba9ae44aa96a60772ef","modified":1592561174852},{"_id":"public/tags/hexo/index.html","hash":"a99f31c02509ba6a7ded2ea32547fb3a847bae4b","modified":1592561174852},{"_id":"public/img/favicon.png","hash":"efb938a836c0b69baecdaadb89a94511f9abb299","modified":1592560637573},{"_id":"public/img/logo.png","hash":"26aa13d23a30369b683aab639499f977fe9f8175","modified":1592560637573},{"_id":"public/photoswipe/default-skin/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1592560637577},{"_id":"public/photoswipe/default-skin/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1592560637577},{"_id":"public/photoswipe/default-skin/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1592560637579},{"_id":"public/js/typed.js","hash":"e817f2a2b12c2da5e76cc1428912fe5900eb100c","modified":1592560637582},{"_id":"public/photoswipe/photoswipe-ui-default.min.js","hash":"d80b713ca1bab90f27a8af7d8e43563f0fe81860","modified":1592560637582},{"_id":"public/photoswipe/photoswipe.css","hash":"a31fa495095783ef5a84ba4dba0bd6f7de3b07ea","modified":1592560637582},{"_id":"public/css/diaspora.css","hash":"b4828ef890a32ec63e043a7270145ae5dd0ce10b","modified":1592560637582},{"_id":"public/js/diaspora.js","hash":"2f83d9355feb9356d032760781695b081a579f35","modified":1592560637582},{"_id":"public/js/plugin.js","hash":"0ac6bf36a9a11ca6fad0af1f20e5705bc326abf4","modified":1592560637582},{"_id":"public/photoswipe/photoswipe-ui-default.js","hash":"c844cca2f9a9969a810a0fb534063e008424c936","modified":1592560637582},{"_id":"public/photoswipe/photoswipe.min.js","hash":"791703278e7c576b08b67f18404bae9eb8cebfaf","modified":1592560637583},{"_id":"public/js/jquery.min.js","hash":"3f1b0e9e54af1af2db2c8a639530448723462151","modified":1592560637583},{"_id":"public/photoswipe/photoswipe.js","hash":"30967789eb2a3e1da9927e71f4f3c5339ebed39a","modified":1592560637583},{"_id":"public/photoswipe/default-skin/default-skin.css","hash":"5763bd1a8015774f37215359bfcb5edd65d198a6","modified":1592560637586},{"_id":"public/img/cover.jpg","hash":"dc7103d4c4e05650595712b3fa395b89726df32b","modified":1592560637593},{"_id":"public/img/welcome-cover.jpg","hash":"c393dfeb52aff20a9921c1f56e2ce127683ab35a","modified":1592560637593},{"_id":"themes/hexo-theme-indigo/.editorconfig","hash":"9b0445427777519defe360ea38c61729d847b3d3","modified":1592375131176},{"_id":"themes/hexo-theme-indigo/LICENSE","hash":"24944bf7920108f5a4790e6071c32e9102760c37","modified":1592375131176},{"_id":"themes/hexo-theme-indigo/README.md","hash":"4bf26d9b43bf24b8e0a1a0d058437a347972f5e6","modified":1592375131176},{"_id":"themes/hexo-theme-indigo/_config.yml","hash":"00f1a1fa5c4c885397a4d78c26141f7f1296f21c","modified":1592375131176},{"_id":"themes/hexo-theme-indigo/package.json","hash":"c795e3100ae3655bfa8b39adcca7333a7925b47f","modified":1592375131179},{"_id":"themes/hexo-theme-indigo/.git/HEAD","hash":"da237e0de55301608e7c572e119ab5c4e43c0e85","modified":1592375131173},{"_id":"themes/hexo-theme-indigo/.git/config","hash":"0173f277890804e9e876d46d33461268aeeea0b2","modified":1592375131174},{"_id":"themes/hexo-theme-indigo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1592374845626},{"_id":"themes/hexo-theme-indigo/.git/index","hash":"6b7f265432e8f6d44a8066ea1f6d58a2e553a870","modified":1592383501693},{"_id":"themes/hexo-theme-indigo/.git/packed-refs","hash":"c7ffafcc8cd05341c3adc76b1ede3a50249d7cef","modified":1592375131136},{"_id":"themes/hexo-theme-indigo/languages/en.yml","hash":"1957d2bfc3a4cef299f4f169b431e9b1128ba162","modified":1592375131176},{"_id":"themes/hexo-theme-indigo/languages/ja.yml","hash":"74fd480874bf5e773ba7f9d2a94697cda979091f","modified":1592375131176},{"_id":"themes/hexo-theme-indigo/languages/nl-NL","hash":"9085c04491f93066f2369911cc2175b59ae596ad","modified":1592375131177},{"_id":"themes/hexo-theme-indigo/languages/zh-CN.yml","hash":"7dc6ae434dde390b6768d244132e23cc78c33817","modified":1592375131177},{"_id":"themes/hexo-theme-indigo/languages/zh-TW.yml","hash":"6a9e820be66eb12ae746f2527e0dc1adf927c685","modified":1592375131177},{"_id":"themes/hexo-theme-indigo/layout/archive.ejs","hash":"d039719e21f6a6fa2925b00aaa623a180a78c818","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/categories.ejs","hash":"41783d2069d5080566a99e6312aa2113105f8b41","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/category.ejs","hash":"7ea26a8a935886963eda82f41c7bd5270cf780d9","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/index.ejs","hash":"39477807b98b2d2df78f3b82498a11e90be8222c","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/layout.ejs","hash":"d52f43fa9572d70cae834e4887c8897b43744805","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/page.ejs","hash":"afb98face24d39a21ebbbde6592a9afc98572aa4","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/post.ejs","hash":"afbf8532dc8d148ca4dff2ca127a3382907cf2f5","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/tags.ejs","hash":"20466446c41409d14a3d42ccaec24a65a045efef","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/scripts/plugins.js","hash":"e439d717513616bedeed37ba9b05117470809b21","modified":1592375131179},{"_id":"themes/hexo-theme-indigo/layout/tag.ejs","hash":"36786a3de7f6cad58209603f7d84ba23addea174","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1592374845626},{"_id":"themes/hexo-theme-indigo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1592374845626},{"_id":"themes/hexo-theme-indigo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1592374845626},{"_id":"themes/hexo-theme-indigo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1592374845626},{"_id":"themes/hexo-theme-indigo/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1592374845626},{"_id":"themes/hexo-theme-indigo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1592374845626},{"_id":"themes/hexo-theme-indigo/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1592374845626},{"_id":"themes/hexo-theme-indigo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1592374845626},{"_id":"themes/hexo-theme-indigo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1592374845626},{"_id":"themes/hexo-theme-indigo/layout/_partial/after-footer.ejs","hash":"9ac30b9439fab69973cf4722dbf2945a18fd3804","modified":1592375131177},{"_id":"themes/hexo-theme-indigo/layout/_partial/archive.ejs","hash":"55cd81ef9183426d6d99fd91550fce0a9cc92aa0","modified":1592375131177},{"_id":"themes/hexo-theme-indigo/layout/_partial/footer.ejs","hash":"e1a71a30a1c7a664ddf3ba3e7eb3a5b90bc4b33c","modified":1592375131177},{"_id":"themes/hexo-theme-indigo/layout/_partial/head.ejs","hash":"02a95a88774cc50dbcc32242b6c8ac7e9d9028bb","modified":1592375131177},{"_id":"themes/hexo-theme-indigo/layout/_partial/header.ejs","hash":"6156bf20791e46fc1c5872113276c1c1f5c13773","modified":1592375131177},{"_id":"themes/hexo-theme-indigo/layout/_partial/index-item.ejs","hash":"ec7b3ec79bbbead9c7e43e2e6c6b5c8bef509410","modified":1592375131177},{"_id":"themes/hexo-theme-indigo/layout/_partial/loading.ejs","hash":"bc4cb19b20de55a0332647f4dca9684184383685","modified":1592375131177},{"_id":"themes/hexo-theme-indigo/layout/_partial/menu.ejs","hash":"d39afaad6b0dd2a3ae27e6db3e9a6cd6014622fa","modified":1592375131177},{"_id":"themes/hexo-theme-indigo/layout/_partial/paginator.ejs","hash":"dc27242927890f130a64400596b9b7ad5fca8972","modified":1592375131177},{"_id":"themes/hexo-theme-indigo/.git/logs/HEAD","hash":"f85b2d25bff3bedf1f68b0a5fe449cf9733ae094","modified":1592375131173},{"_id":"themes/hexo-theme-indigo/layout/_partial/post.ejs","hash":"a87d9b0485b3bf4cdfdad890e5974c43dbaa8240","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/_partial/script.ejs","hash":"7e06d1c3ecf964a0a31e811d2c4935e084c6ad5c","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/_partial/search.ejs","hash":"c2091c621b5480ef1e69d72027028cec8e929892","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/_partial/tags-bar.ejs","hash":"19eff4876d31080a427644f7a43fe172d0c008c6","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/source/css/style.less","hash":"f22d4146e0bdb4485d33f20080c67ba05724afea","modified":1592375131195},{"_id":"themes/hexo-theme-indigo/source/img/alipay.jpg","hash":"6054d9ed2ca7cd1f645b729e05632134467d4daa","modified":1592375131195},{"_id":"themes/hexo-theme-indigo/source/img/avatar.jpg","hash":"62a4893b1a32e997dcdb6e467b10559df75221e2","modified":1592375131195},{"_id":"themes/hexo-theme-indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1592375131195},{"_id":"themes/hexo-theme-indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1592375131195},{"_id":"themes/hexo-theme-indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1592375131195},{"_id":"themes/hexo-theme-indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1592375131195},{"_id":"themes/hexo-theme-indigo/source/img/wechat.jpg","hash":"ef069cc9e80c7553fd60589b0727bbbf8c6de372","modified":1592375131195},{"_id":"themes/hexo-theme-indigo/source/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1592375131196},{"_id":"themes/hexo-theme-indigo/source/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1592375131196},{"_id":"themes/hexo-theme-indigo/source/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1592375131196},{"_id":"themes/hexo-theme-indigo/source/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1592375131196},{"_id":"themes/hexo-theme-indigo/.git/refs/heads/card","hash":"215cf3cc5ee9a6265fb8b0259977357fe8d4fdd0","modified":1592375131173},{"_id":"themes/hexo-theme-indigo/layout/_partial/plugins/baidu.ejs","hash":"e44d526029f122e9c2c74f3a647c35002c818cbe","modified":1592375131177},{"_id":"themes/hexo-theme-indigo/layout/_partial/plugins/disqus.ejs","hash":"4a0c01e4195f685f9825fcd016d01249dbdd52ca","modified":1592375131177},{"_id":"themes/hexo-theme-indigo/layout/_partial/plugins/dynamic-title.ejs","hash":"23c101d45911eb0846533aaa2d409c43aa5e899a","modified":1592375131177},{"_id":"themes/hexo-theme-indigo/layout/_partial/plugins/gitalk.ejs","hash":"bcf792a5633151fd999319fd91cf477e6860ae9c","modified":1592375131177},{"_id":"themes/hexo-theme-indigo/layout/_partial/plugins/gitment.ejs","hash":"5723d507eca4390e8e5d18c0770e7953b8c22f5a","modified":1592375131177},{"_id":"themes/hexo-theme-indigo/layout/_partial/plugins/google-analytics.ejs","hash":"a947f4076b54b48d4df5baf2d5b3c39b632c7576","modified":1592375131177},{"_id":"themes/hexo-theme-indigo/layout/_partial/plugins/hyper-comments.ejs","hash":"e5a83acc7c2e385b0c9abf428e86e8fdfd3a5202","modified":1592375131177},{"_id":"themes/hexo-theme-indigo/layout/_partial/plugins/mathjax.ejs","hash":"ea603a057196de53bd6afab1fddb93d11f27eb81","modified":1592375131177},{"_id":"themes/hexo-theme-indigo/layout/_partial/plugins/page-visit.ejs","hash":"2decb77bf3c1a064ea6ce1d4e78892c434d9c884","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/_partial/plugins/site-visit.ejs","hash":"8fbd0910828f1ab6eba728bdecc9811d623baae2","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/_partial/plugins/tajs.ejs","hash":"97b48fe10be1c71d4ff25ccec3bd92d97466c9c5","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/_partial/plugins/uyan.ejs","hash":"e370bd04ea5cf1c83e0c20516aff7ba3ca8b2d0b","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/_partial/plugins/valine.ejs","hash":"a976ca36bd09aeb2902bf94fcc7a59975ea25148","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/_partial/post/category.ejs","hash":"c7476165721a3a5e34d00d8c5c07e1e5474cd800","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/_partial/post/comment.ejs","hash":"21530a1bc362d286d08dbce0baf37d09d7c58c92","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/_partial/post/copyright.ejs","hash":"5305ed30ee35cf50f87656737d0ffe85f5bfc16b","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/_partial/post/date.ejs","hash":"ea85b46e12d3b9c3612eef7aa76289a663fbc096","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/_partial/post/head-meta.ejs","hash":"b0c680ce5b8aaf461a6731b1ff1287bd140c168a","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/_partial/post/nav.ejs","hash":"11e7d504f7c7a3c4c052da13cfa8ea4862c9383e","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/_partial/post/reward-btn.ejs","hash":"41c242fe3159dc68cec8dd00ab6d2663f5a51179","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/_partial/post/reward.ejs","hash":"23719e09689b3afbb19214c6603eb02f896cb9ba","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/_partial/post/share-fab.ejs","hash":"93482ad7d1e01b966f5ee1c5d12b88564e02b349","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/_partial/post/share.ejs","hash":"8df0d7bf6f8e106cdbdac2dd10a97367aa0695f8","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/_partial/post/tag.ejs","hash":"b3dc38652c4a018a37418136478dcd522fc49f79","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/_partial/post/title.ejs","hash":"062d56cb88ae2be3a6616b911d4ebeffcbfe3cff","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/_partial/post/toc.ejs","hash":"ad287a70724eb7cd8cd2a03a45b68032ee99973d","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/layout/_partial/post/updated.ejs","hash":"5caa71745aa340ce57938a930f3b898ee7518d74","modified":1592375131178},{"_id":"themes/hexo-theme-indigo/source/css/_partial/archives.less","hash":"7d2a6886265386c640e94ffca3f042675f701a35","modified":1592375131179},{"_id":"themes/hexo-theme-indigo/source/css/_partial/article.less","hash":"d476cd3537bcd8a02d055cc223f5c805b8638cc2","modified":1592375131179},{"_id":"themes/hexo-theme-indigo/source/css/_partial/gotop.less","hash":"b7db31b9bc563c10b9e3cf3e6d9cfddfeb3e805a","modified":1592375131179},{"_id":"themes/hexo-theme-indigo/source/css/_partial/header.less","hash":"90f0948a9182c14b1dac1e9dbed3c883543266f9","modified":1592375131179},{"_id":"themes/hexo-theme-indigo/source/css/_partial/highlight.less","hash":"58492b7cdb45fe09b026b2f34e8ae69c2ddb8228","modified":1592375131179},{"_id":"themes/hexo-theme-indigo/source/css/_partial/layout.less","hash":"4390ed22abad59c8b28ed1a479a52f15b5f9cf4a","modified":1592375131180},{"_id":"themes/hexo-theme-indigo/source/css/_partial/lightbox.less","hash":"9b961eb1d70e7658f42cf2ca895fa5e35a6b6541","modified":1592375131180},{"_id":"themes/hexo-theme-indigo/source/css/_partial/loading.less","hash":"f9d06a1e24fb4857fd18d7a0bfbb3a0ab2d1c742","modified":1592375131180},{"_id":"themes/hexo-theme-indigo/source/css/_partial/page.less","hash":"e92ccb53e6ac73a51498c6a9672db9d0d2bc7f1a","modified":1592375131180},{"_id":"themes/hexo-theme-indigo/source/css/_partial/postlist.less","hash":"1c041bf91106808e5480c60d9ece45431bb503b3","modified":1592375131180},{"_id":"themes/hexo-theme-indigo/source/css/_partial/reward.less","hash":"4857f90bb57fc22ca3f942d8934d86d5e9e82c1e","modified":1592375131180},{"_id":"themes/hexo-theme-indigo/source/css/_partial/roboto.less","hash":"2e0469ed8161d5672d903ca1a8027cd65fe007f1","modified":1592375131180},{"_id":"themes/hexo-theme-indigo/source/css/_partial/search.less","hash":"1d6641ae7568a0153d24beba9fd9704d2b155f6c","modified":1592375131180},{"_id":"themes/hexo-theme-indigo/source/css/_partial/share.less","hash":"27d80bcc96a53dd1e7eaa9a7d746e4b212357302","modified":1592375131180},{"_id":"themes/hexo-theme-indigo/source/css/_partial/tags.less","hash":"959f4373fda6e45f6a4041a995ed3ea8a05a5170","modified":1592375131180},{"_id":"themes/hexo-theme-indigo/source/css/_partial/variable.less","hash":"082896b966ed25b39c74e7b007b4f54c235685a4","modified":1592375131180},{"_id":"themes/hexo-theme-indigo/source/css/_partial/waves.less","hash":"77bfd0b373b0469eb0176167fb076ccda4edf2a7","modified":1592375131180},{"_id":"themes/hexo-theme-indigo/source/css/_plugin/valine.less","hash":"ddbb7647d83f732f9b0d5d817d40a748006949cc","modified":1592375131180},{"_id":"themes/hexo-theme-indigo/.git/objects/pack/pack-e4a27d47e1244161a41b37c81db9c9f8ab0be3aa.idx","hash":"d4e1d5ba0717aedf5596ab0396881a7b1634ee2e","modified":1592375131128},{"_id":"themes/hexo-theme-indigo/source/css/_partial/fontawesome.less","hash":"ca30b732d2efbb0cd55a272ecdabc97f895aee78","modified":1592375131179},{"_id":"themes/hexo-theme-indigo/.git/logs/refs/heads/card","hash":"f85b2d25bff3bedf1f68b0a5fe449cf9733ae094","modified":1592375131173},{"_id":"themes/hexo-theme-indigo/.git/refs/remotes/origin/HEAD","hash":"7f141be72288af81f8e55d94df5da3f87101e8f1","modified":1592375131173},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1592375131188},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1592375131189},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1592375131189},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1592375131191},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1592375131191},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1592375131192},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1592375131192},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1592375131193},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1592375131193},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1592375131194},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1592375131195},{"_id":"themes/hexo-theme-indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1592375131188},{"_id":"themes/hexo-theme-indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1592375131188},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1592375131189},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1592375131190},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1592375131191},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1592375131192},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1592375131192},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1592375131193},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1592375131195},{"_id":"themes/hexo-theme-indigo/.git/logs/refs/remotes/origin/HEAD","hash":"f85b2d25bff3bedf1f68b0a5fe449cf9733ae094","modified":1592375131173},{"_id":"themes/hexo-theme-indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1592375131181},{"_id":"themes/hexo-theme-indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1592375131183},{"_id":"themes/hexo-theme-indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1592375131187},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1592375131189},{"_id":"themes/hexo-theme-indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1592375131194},{"_id":"themes/hexo-theme-indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1592375131186},{"_id":"themes/hexo-theme-indigo/.git/objects/pack/pack-e4a27d47e1244161a41b37c81db9c9f8ab0be3aa.pack","hash":"c0594cb2430ad345c3fcd1efbf2fbbc41ecad402","modified":1592375131127},{"_id":"public/css/style.less","hash":"f22d4146e0bdb4485d33f20080c67ba05724afea","modified":1592561060153},{"_id":"public/img/alipay.jpg","hash":"6054d9ed2ca7cd1f645b729e05632134467d4daa","modified":1592561060153},{"_id":"public/img/avatar.jpg","hash":"62a4893b1a32e997dcdb6e467b10559df75221e2","modified":1592561060153},{"_id":"public/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1592561060153},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1592561060153},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1592561060154},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1592561060154},{"_id":"public/img/wechat.jpg","hash":"ef069cc9e80c7553fd60589b0727bbbf8c6de372","modified":1592561060154},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1592561060154},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1592561060154},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1592561060154},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1592561060154},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1592561060154},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1592561060154},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1592561060154},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1592561060154},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1592561060154},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1592561060154},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1592561060154},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1592561060154},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1592561060155},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1592561060155},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1592561060155},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1592561060160},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1592561060160},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1592561060160},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1592561060160},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1592561060161},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1592561060161},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1592561060161},{"_id":"public/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1592561060171},{"_id":"public/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1592561060172},{"_id":"public/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1592561060172},{"_id":"public/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1592561060172},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1592561060172},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1592561060180},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1592561060180},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1592561060190}],"Category":[{"name":"go","_id":"ckblkjn6100040tpcaw18c6o3"},{"name":"java","_id":"ckblkjn6s000i0tpc4jmr2wo5"},{"name":"linux","_id":"ckbm1hf6h00020jpc8k9g0a7t"}],"Data":[],"Page":[{"title":"分类","date":"2020-06-17T15:09:49.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2020-06-17 15:09:49\ntype: categories\n---\n","updated":"2020-06-17T07:11:05.662Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckblkjn5s00000tpcjmxj0hrv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于","date":"2020-06-17T15:42:00.000Z","_content":"\n一枚90后Java开发","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2020-06-17 15:42:00\n---\n\n一枚90后Java开发","updated":"2020-06-17T09:02:33.156Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckblkjn5y00020tpcgxhef6sj","content":"<p>一枚90后Java开发</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一枚90后Java开发</p>\n"},{"title":"标签","date":"2020-06-17T15:15:03.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2020-06-17 15:15:03\ntype: tags\n---\n","updated":"2020-06-17T07:19:54.206Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckblkjn6300050tpc3vcl0qsd","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"go-Map声明、访问、遍历","date":"2020-06-17T10:01:33.541Z","comments":1,"_content":"\n**声明方式**\n\n> map[key类型]value类型{},如\nmap[string]string{}\n\n**获取key**\n> 在访问的key不存在时，仍会然回零值，不能通过返回nil来判断元素是否存在\n<!--more-->\n```go\nfunc TestGetKey(t *testing.T) {\n\tm1 := map[int]int{}\n\tt.Log(m1[100])\n\n\tm1[2] = 0\n\tt.Log(m1[2])\n\tm1[20] = 2000\n\tif value,exist := m1[20]; exist{\n\t\tt.Log(\"key 存在\",value)\n\t}else{\n\t\tt.Log(\"key 不存在\")\n\t}\n}\n```\n\n**map遍历**\n* 遍历也是使用range,与数组遍历一样\n\n```go\nfunc TestTravelMap(t *testing.T) {\n\tm1 := map[string]string{\"name\": \"小张\", \"password\": \"123456\"}\n\n\tfor k, v := range m1 {\n\t\tt.Logf(\"key is %s,value is %s\", k, v)\n\t}\n\n}\n```\n","source":"_posts/go-Map声明、访问、遍历.md","raw":"---\ntitle: go-Map声明、访问、遍历\ndate: 2020年6月16日\ncomments: true\ncategories: go\ntags:\n---\n\n**声明方式**\n\n> map[key类型]value类型{},如\nmap[string]string{}\n\n**获取key**\n> 在访问的key不存在时，仍会然回零值，不能通过返回nil来判断元素是否存在\n<!--more-->\n```go\nfunc TestGetKey(t *testing.T) {\n\tm1 := map[int]int{}\n\tt.Log(m1[100])\n\n\tm1[2] = 0\n\tt.Log(m1[2])\n\tm1[20] = 2000\n\tif value,exist := m1[20]; exist{\n\t\tt.Log(\"key 存在\",value)\n\t}else{\n\t\tt.Log(\"key 不存在\")\n\t}\n}\n```\n\n**map遍历**\n* 遍历也是使用range,与数组遍历一样\n\n```go\nfunc TestTravelMap(t *testing.T) {\n\tm1 := map[string]string{\"name\": \"小张\", \"password\": \"123456\"}\n\n\tfor k, v := range m1 {\n\t\tt.Logf(\"key is %s,value is %s\", k, v)\n\t}\n\n}\n```\n","slug":"go-Map声明、访问、遍历","published":1,"updated":"2020-06-17T10:01:33.541Z","layout":"post","photos":[],"link":"","_id":"ckblkjn5u00010tpce5suvjqs","content":"<p><strong>声明方式</strong></p>\n<blockquote>\n<p>map[key类型]value类型{},如<br>map[string]string{}</p>\n</blockquote>\n<p><strong>获取key</strong></p>\n<blockquote>\n<p>在访问的key不存在时，仍会然回零值，不能通过返回nil来判断元素是否存在</p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestGetKey</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tm1 := <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\">\tt.Log(m1[<span class=\"number\">100</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">\tm1[<span class=\"number\">2</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">\tt.Log(m1[<span class=\"number\">2</span>])</span><br><span class=\"line\">\tm1[<span class=\"number\">20</span>] = <span class=\"number\">2000</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> value,exist := m1[<span class=\"number\">20</span>]; exist&#123;</span><br><span class=\"line\">\t\tt.Log(<span class=\"string\">\"key 存在\"</span>,value)</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tt.Log(<span class=\"string\">\"key 不存在\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>map遍历</strong></p>\n<ul>\n<li>遍历也是使用range,与数组遍历一样</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestTravelMap</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tm1 := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"小张\"</span>, <span class=\"string\">\"password\"</span>: <span class=\"string\">\"123456\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> m1 &#123;</span><br><span class=\"line\">\t\tt.Logf(<span class=\"string\">\"key is %s,value is %s\"</span>, k, v)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p><strong>声明方式</strong></p>\n<blockquote>\n<p>map[key类型]value类型{},如<br>map[string]string{}</p>\n</blockquote>\n<p><strong>获取key</strong></p>\n<blockquote>\n<p>在访问的key不存在时，仍会然回零值，不能通过返回nil来判断元素是否存在</p>\n</blockquote>","more":"<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestGetKey</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tm1 := <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">int</span>&#123;&#125;</span><br><span class=\"line\">\tt.Log(m1[<span class=\"number\">100</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">\tm1[<span class=\"number\">2</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">\tt.Log(m1[<span class=\"number\">2</span>])</span><br><span class=\"line\">\tm1[<span class=\"number\">20</span>] = <span class=\"number\">2000</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> value,exist := m1[<span class=\"number\">20</span>]; exist&#123;</span><br><span class=\"line\">\t\tt.Log(<span class=\"string\">\"key 存在\"</span>,value)</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tt.Log(<span class=\"string\">\"key 不存在\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>map遍历</strong></p>\n<ul>\n<li>遍历也是使用range,与数组遍历一样</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestTravelMap</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tm1 := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"小张\"</span>, <span class=\"string\">\"password\"</span>: <span class=\"string\">\"123456\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> m1 &#123;</span><br><span class=\"line\">\t\tt.Logf(<span class=\"string\">\"key is %s,value is %s\"</span>, k, v)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"go-Map与工厂模式、Set实现","date":"2020-06-17T12:09:23.009Z","comments":1,"_content":"\n**Map与工厂模式**\n\n* map的value可以是一个方法\n```go\nfunc TestMapWithFunValue(t *testing.T) {\n\tm := map[int]func(in int) int{}\n\tm[1] = func(in int) int { return in }\n\tm[2] = func(in int) int { return in * in }\n\tm[3] = func(in int) int { return in * in * in }\n\n\tt.Log(m[1](3), m[2](3), m[3](3))\n}\n```\n* 与Go的 Dock type 接口方式一，可以方便的实现单一方法的工厂模式\n<!--more-->\n\n**实现Set**\n\n* go的内置集合中没有Set实现，可以map[type]bool\n1. 元素的唯一性\n2. 基本操作（添加元素，判断是否存在，删除元素，元素个数)\n\n```go\nfunc TestMapForSet(t *testing.T) {\n\tmySet := map[int]bool{}\n\t// 添加\n\tmySet[1] = true\n\t// 判断元素是否存在\n\tif mySet[1] {\n\t\tt.Log(\"key 1 存在\")\n\t}\n\t// 元素个数\n\tt.Log(len(mySet))\n\t// 删除元素\n\tdelete(mySet,1)\n}\n```\n","source":"_posts/go-Map与工厂模式、Set实现.md","raw":"---\ntitle: go-Map与工厂模式、Set实现\ndate: 2020年6月16日\ncomments: true\ncategories: go\ntags:\n---\n\n**Map与工厂模式**\n\n* map的value可以是一个方法\n```go\nfunc TestMapWithFunValue(t *testing.T) {\n\tm := map[int]func(in int) int{}\n\tm[1] = func(in int) int { return in }\n\tm[2] = func(in int) int { return in * in }\n\tm[3] = func(in int) int { return in * in * in }\n\n\tt.Log(m[1](3), m[2](3), m[3](3))\n}\n```\n* 与Go的 Dock type 接口方式一，可以方便的实现单一方法的工厂模式\n<!--more-->\n\n**实现Set**\n\n* go的内置集合中没有Set实现，可以map[type]bool\n1. 元素的唯一性\n2. 基本操作（添加元素，判断是否存在，删除元素，元素个数)\n\n```go\nfunc TestMapForSet(t *testing.T) {\n\tmySet := map[int]bool{}\n\t// 添加\n\tmySet[1] = true\n\t// 判断元素是否存在\n\tif mySet[1] {\n\t\tt.Log(\"key 1 存在\")\n\t}\n\t// 元素个数\n\tt.Log(len(mySet))\n\t// 删除元素\n\tdelete(mySet,1)\n}\n```\n","slug":"go-Map与工厂模式、Set实现","published":1,"updated":"2020-06-17T12:09:23.009Z","layout":"post","photos":[],"link":"","_id":"ckblkjn5z00030tpcrc9s4mzy","content":"<p><strong>Map与工厂模式</strong></p>\n<ul>\n<li><p>map的value可以是一个方法</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestMapWithFunValue</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tm := <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(in <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span>&#123;&#125;</span><br><span class=\"line\">\tm[<span class=\"number\">1</span>] = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(in <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123; <span class=\"keyword\">return</span> in &#125;</span><br><span class=\"line\">\tm[<span class=\"number\">2</span>] = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(in <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123; <span class=\"keyword\">return</span> in * in &#125;</span><br><span class=\"line\">\tm[<span class=\"number\">3</span>] = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(in <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123; <span class=\"keyword\">return</span> in * in * in &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tt.Log(m[<span class=\"number\">1</span>](<span class=\"number\">3</span>), m[<span class=\"number\">2</span>](<span class=\"number\">3</span>), m[<span class=\"number\">3</span>](<span class=\"number\">3</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>与Go的 Dock type 接口方式一，可以方便的实现单一方法的工厂模式</p>\n<a id=\"more\"></a>\n\n</li>\n</ul>\n<p><strong>实现Set</strong></p>\n<ul>\n<li>go的内置集合中没有Set实现，可以map[type]bool</li>\n</ul>\n<ol>\n<li>元素的唯一性</li>\n<li>基本操作（添加元素，判断是否存在，删除元素，元素个数)</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestMapForSet</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tmySet := <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">bool</span>&#123;&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 添加</span></span><br><span class=\"line\">\tmySet[<span class=\"number\">1</span>] = <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"comment\">// 判断元素是否存在</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> mySet[<span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">\t\tt.Log(<span class=\"string\">\"key 1 存在\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 元素个数</span></span><br><span class=\"line\">\tt.Log(<span class=\"built_in\">len</span>(mySet))</span><br><span class=\"line\">\t<span class=\"comment\">// 删除元素</span></span><br><span class=\"line\">\t<span class=\"built_in\">delete</span>(mySet,<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p><strong>Map与工厂模式</strong></p>\n<ul>\n<li><p>map的value可以是一个方法</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestMapWithFunValue</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tm := <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(in <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span>&#123;&#125;</span><br><span class=\"line\">\tm[<span class=\"number\">1</span>] = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(in <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123; <span class=\"keyword\">return</span> in &#125;</span><br><span class=\"line\">\tm[<span class=\"number\">2</span>] = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(in <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123; <span class=\"keyword\">return</span> in * in &#125;</span><br><span class=\"line\">\tm[<span class=\"number\">3</span>] = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(in <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123; <span class=\"keyword\">return</span> in * in * in &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tt.Log(m[<span class=\"number\">1</span>](<span class=\"number\">3</span>), m[<span class=\"number\">2</span>](<span class=\"number\">3</span>), m[<span class=\"number\">3</span>](<span class=\"number\">3</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>与Go的 Dock type 接口方式一，可以方便的实现单一方法的工厂模式</p>","more":"</li>\n</ul>\n<p><strong>实现Set</strong></p>\n<ul>\n<li>go的内置集合中没有Set实现，可以map[type]bool</li>\n</ul>\n<ol>\n<li>元素的唯一性</li>\n<li>基本操作（添加元素，判断是否存在，删除元素，元素个数)</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestMapForSet</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tmySet := <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">bool</span>&#123;&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 添加</span></span><br><span class=\"line\">\tmySet[<span class=\"number\">1</span>] = <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"comment\">// 判断元素是否存在</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> mySet[<span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">\t\tt.Log(<span class=\"string\">\"key 1 存在\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 元素个数</span></span><br><span class=\"line\">\tt.Log(<span class=\"built_in\">len</span>(mySet))</span><br><span class=\"line\">\t<span class=\"comment\">// 删除元素</span></span><br><span class=\"line\">\t<span class=\"built_in\">delete</span>(mySet,<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"go-数据类型","date":"2020-06-17T10:01:33.541Z","comments":1,"_content":"\n**基本数据类型**\n1. bool\n2. string\n3. int int8 int16 int 32 int 64\n4. uint uint8 uint16 uint32 uint64 uintptr\n5. byte\n6. rune\n7. float32 float64\n8. complex64 complex128\n\n\n**类型转化和其他主要编程语言的差异**\n1. Go语言不允许隐式类型转换\n2. 别和原有类型也不能进行隐式转换\n<!--more-->\n```go\npackage type_test\n\nimport \"testing\"\n\ntype MyInt int64\nfunc TestImplicit(t *testing.T) {\n\tvar a int32 = 1\n\tvar b int64\n\tb = int64(a)\n\tvar c MyInt\n\tc = MyInt(b)\n\tt.Log(b,c)\n}\n```\n\n**类型的预定义值**\n\n1. math.MaxInt64\n2. math.MaxFloat64\n3. math.MaxUint32\n\n**指针类型**\n\n1. 不支持指针运算\n2. string是值类型，其默认的初始化为空字符串，而不是nil\n\n\n```go\nfunc TestPoint(t *testing.T) {\n\ta := 1\n\taPtr := &a\n\t//aPtr++\n\tt.Log(a, aPtr)\n\tt.Logf(\"%T %T\", a, aPtr)\n}\n\nfunc TestString(t *testing.T) {\n\tvar s string\n\tt.Log(\"*\" + s + \"*\")\n\tif s == \"\" {\n\t\tt.Log(len(s))\n\t}\n}\n\n```","source":"_posts/go-datatype.md","raw":"---\ntitle: go-数据类型\ndate: 2020年6月16日\ncomments: true\ncategories: go\ntags:\n---\n\n**基本数据类型**\n1. bool\n2. string\n3. int int8 int16 int 32 int 64\n4. uint uint8 uint16 uint32 uint64 uintptr\n5. byte\n6. rune\n7. float32 float64\n8. complex64 complex128\n\n\n**类型转化和其他主要编程语言的差异**\n1. Go语言不允许隐式类型转换\n2. 别和原有类型也不能进行隐式转换\n<!--more-->\n```go\npackage type_test\n\nimport \"testing\"\n\ntype MyInt int64\nfunc TestImplicit(t *testing.T) {\n\tvar a int32 = 1\n\tvar b int64\n\tb = int64(a)\n\tvar c MyInt\n\tc = MyInt(b)\n\tt.Log(b,c)\n}\n```\n\n**类型的预定义值**\n\n1. math.MaxInt64\n2. math.MaxFloat64\n3. math.MaxUint32\n\n**指针类型**\n\n1. 不支持指针运算\n2. string是值类型，其默认的初始化为空字符串，而不是nil\n\n\n```go\nfunc TestPoint(t *testing.T) {\n\ta := 1\n\taPtr := &a\n\t//aPtr++\n\tt.Log(a, aPtr)\n\tt.Logf(\"%T %T\", a, aPtr)\n}\n\nfunc TestString(t *testing.T) {\n\tvar s string\n\tt.Log(\"*\" + s + \"*\")\n\tif s == \"\" {\n\t\tt.Log(len(s))\n\t}\n}\n\n```","slug":"go-datatype","published":1,"updated":"2020-06-17T10:01:33.541Z","layout":"post","photos":[],"link":"","_id":"ckblkjn6400060tpchewv4qhn","content":"<p><strong>基本数据类型</strong></p>\n<ol>\n<li>bool</li>\n<li>string</li>\n<li>int int8 int16 int 32 int 64</li>\n<li>uint uint8 uint16 uint32 uint64 uintptr</li>\n<li>byte</li>\n<li>rune</li>\n<li>float32 float64</li>\n<li>complex64 complex128</li>\n</ol>\n<p><strong>类型转化和其他主要编程语言的差异</strong></p>\n<ol>\n<li>Go语言不允许隐式类型转换</li>\n<li>别和原有类型也不能进行隐式转换<a id=\"more\"></a>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> type_test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"testing\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyInt <span class=\"keyword\">int64</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestImplicit</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a <span class=\"keyword\">int32</span> = <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b <span class=\"keyword\">int64</span></span><br><span class=\"line\">\tb = <span class=\"keyword\">int64</span>(a)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> c MyInt</span><br><span class=\"line\">\tc = MyInt(b)</span><br><span class=\"line\">\tt.Log(b,c)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><strong>类型的预定义值</strong></p>\n<ol>\n<li>math.MaxInt64</li>\n<li>math.MaxFloat64</li>\n<li>math.MaxUint32</li>\n</ol>\n<p><strong>指针类型</strong></p>\n<ol>\n<li>不支持指针运算</li>\n<li>string是值类型，其默认的初始化为空字符串，而不是nil</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestPoint</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\ta := <span class=\"number\">1</span></span><br><span class=\"line\">\taPtr := &amp;a</span><br><span class=\"line\">\t<span class=\"comment\">//aPtr++</span></span><br><span class=\"line\">\tt.Log(a, aPtr)</span><br><span class=\"line\">\tt.Logf(<span class=\"string\">\"%T %T\"</span>, a, aPtr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestString</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s <span class=\"keyword\">string</span></span><br><span class=\"line\">\tt.Log(<span class=\"string\">\"*\"</span> + s + <span class=\"string\">\"*\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> s == <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\tt.Log(<span class=\"built_in\">len</span>(s))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><strong>基本数据类型</strong></p>\n<ol>\n<li>bool</li>\n<li>string</li>\n<li>int int8 int16 int 32 int 64</li>\n<li>uint uint8 uint16 uint32 uint64 uintptr</li>\n<li>byte</li>\n<li>rune</li>\n<li>float32 float64</li>\n<li>complex64 complex128</li>\n</ol>\n<p><strong>类型转化和其他主要编程语言的差异</strong></p>\n<ol>\n<li>Go语言不允许隐式类型转换</li>\n<li>别和原有类型也不能进行隐式转换","more":"<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> type_test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"testing\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyInt <span class=\"keyword\">int64</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestImplicit</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a <span class=\"keyword\">int32</span> = <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b <span class=\"keyword\">int64</span></span><br><span class=\"line\">\tb = <span class=\"keyword\">int64</span>(a)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> c MyInt</span><br><span class=\"line\">\tc = MyInt(b)</span><br><span class=\"line\">\tt.Log(b,c)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><strong>类型的预定义值</strong></p>\n<ol>\n<li>math.MaxInt64</li>\n<li>math.MaxFloat64</li>\n<li>math.MaxUint32</li>\n</ol>\n<p><strong>指针类型</strong></p>\n<ol>\n<li>不支持指针运算</li>\n<li>string是值类型，其默认的初始化为空字符串，而不是nil</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestPoint</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\ta := <span class=\"number\">1</span></span><br><span class=\"line\">\taPtr := &amp;a</span><br><span class=\"line\">\t<span class=\"comment\">//aPtr++</span></span><br><span class=\"line\">\tt.Log(a, aPtr)</span><br><span class=\"line\">\tt.Logf(<span class=\"string\">\"%T %T\"</span>, a, aPtr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestString</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s <span class=\"keyword\">string</span></span><br><span class=\"line\">\tt.Log(<span class=\"string\">\"*\"</span> + s + <span class=\"string\">\"*\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> s == <span class=\"string\">\"\"</span> &#123;</span><br><span class=\"line\">\t\tt.Log(<span class=\"built_in\">len</span>(s))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"go-字符串","date":"2020-06-17T10:01:33.541Z","comments":1,"_content":"\n***与其他语言的差异***\n\n1. string 是数据类型，不是引用或指针类型\n2. string是只读的byte sclice,len函数可以返回它包含的byte长度\n3. string的byte数可以存放任何数据\n<!--more-->\n\n**Unicode UTF-8**\n\n1. Unicode 是一种字符集\n2. UTF-8是unicode 的存储实现\n\n常用转换\n\n```go\nfunc TestStringConv(t *testing.T) {\n\n\t// 整型转string\n\ts := strconv.Itoa(10)\n\tt.Logf(\"s type is %[1]T value is %[1]s\", s)\n\t// 字符串转整型\n\tval,_ :=strconv.Atoi(\"10\")\n\tt.Log(val+10)\n\n\tt.Log(Str2DEC(\"1000\"))\n}\n```","source":"_posts/go-字符串.md","raw":"---\ntitle: go-字符串\ndate: 2020年6月16日\ncomments: true\ncategories: go\ntags:\n---\n\n***与其他语言的差异***\n\n1. string 是数据类型，不是引用或指针类型\n2. string是只读的byte sclice,len函数可以返回它包含的byte长度\n3. string的byte数可以存放任何数据\n<!--more-->\n\n**Unicode UTF-8**\n\n1. Unicode 是一种字符集\n2. UTF-8是unicode 的存储实现\n\n常用转换\n\n```go\nfunc TestStringConv(t *testing.T) {\n\n\t// 整型转string\n\ts := strconv.Itoa(10)\n\tt.Logf(\"s type is %[1]T value is %[1]s\", s)\n\t// 字符串转整型\n\tval,_ :=strconv.Atoi(\"10\")\n\tt.Log(val+10)\n\n\tt.Log(Str2DEC(\"1000\"))\n}\n```","slug":"go-字符串","published":1,"updated":"2020-06-17T10:01:33.541Z","layout":"post","photos":[],"link":"","_id":"ckblkjn6a00070tpc48lm0z1l","content":"<p><strong><em>与其他语言的差异</em></strong></p>\n<ol>\n<li>string 是数据类型，不是引用或指针类型</li>\n<li>string是只读的byte sclice,len函数可以返回它包含的byte长度</li>\n<li>string的byte数可以存放任何数据<a id=\"more\"></a>\n\n</li>\n</ol>\n<p><strong>Unicode UTF-8</strong></p>\n<ol>\n<li>Unicode 是一种字符集</li>\n<li>UTF-8是unicode 的存储实现</li>\n</ol>\n<p>常用转换</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestStringConv</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 整型转string</span></span><br><span class=\"line\">\ts := strconv.Itoa(<span class=\"number\">10</span>)</span><br><span class=\"line\">\tt.Logf(<span class=\"string\">\"s type is %[1]T value is %[1]s\"</span>, s)</span><br><span class=\"line\">\t<span class=\"comment\">// 字符串转整型</span></span><br><span class=\"line\">\tval,_ :=strconv.Atoi(<span class=\"string\">\"10\"</span>)</span><br><span class=\"line\">\tt.Log(val+<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tt.Log(Str2DEC(<span class=\"string\">\"1000\"</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><strong><em>与其他语言的差异</em></strong></p>\n<ol>\n<li>string 是数据类型，不是引用或指针类型</li>\n<li>string是只读的byte sclice,len函数可以返回它包含的byte长度</li>\n<li>string的byte数可以存放任何数据","more":"</li>\n</ol>\n<p><strong>Unicode UTF-8</strong></p>\n<ol>\n<li>Unicode 是一种字符集</li>\n<li>UTF-8是unicode 的存储实现</li>\n</ol>\n<p>常用转换</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestStringConv</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 整型转string</span></span><br><span class=\"line\">\ts := strconv.Itoa(<span class=\"number\">10</span>)</span><br><span class=\"line\">\tt.Logf(<span class=\"string\">\"s type is %[1]T value is %[1]s\"</span>, s)</span><br><span class=\"line\">\t<span class=\"comment\">// 字符串转整型</span></span><br><span class=\"line\">\tval,_ :=strconv.Atoi(<span class=\"string\">\"10\"</span>)</span><br><span class=\"line\">\tt.Log(val+<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tt.Log(Str2DEC(<span class=\"string\">\"1000\"</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"go-函数","date":"2020-06-17T10:01:33.541Z","comments":1,"_content":"\n1. 可以有多个返回值\n2. 所有参数都是值传递\n3. 函数可以作为变量的值\n4. 函数可以作为参数和返回值\n<!--more-->\n```go\n\npackage _func\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"testing\"\n\t\"time\"\n)\n\nfunc returnMultiValues() (int, int) {\n\treturn rand.Intn(10), rand.Intn(20)\n}\n\nfunc timeSpent(inner func(op int) int) func(op int) int {\n\treturn func(n int) int {\n\t\tstart := time.Now()\n\t\tret := inner(n)\n\n\t\tfmt.Println(\"time spent:\", time.Since(start).Seconds())\n\t\treturn ret\n\t}\n}\nfunc slowFun(op int) int {\n\ttime.Sleep(time.Second* 1)\n\treturn op\n}\n\nfunc TestFn(t *testing.T) {\n\ta, b := returnMultiValues()\n\tt.Log(a, b)\n\ttsSF := timeSpent(slowFun)\n\tt.Log(tsSF(10))\n}\n\n\n```","source":"_posts/go-函数.md","raw":"---\ntitle: go-函数\ndate: 2020年6月16日\ncomments: true\ncategories: go\ntags:\n---\n\n1. 可以有多个返回值\n2. 所有参数都是值传递\n3. 函数可以作为变量的值\n4. 函数可以作为参数和返回值\n<!--more-->\n```go\n\npackage _func\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"testing\"\n\t\"time\"\n)\n\nfunc returnMultiValues() (int, int) {\n\treturn rand.Intn(10), rand.Intn(20)\n}\n\nfunc timeSpent(inner func(op int) int) func(op int) int {\n\treturn func(n int) int {\n\t\tstart := time.Now()\n\t\tret := inner(n)\n\n\t\tfmt.Println(\"time spent:\", time.Since(start).Seconds())\n\t\treturn ret\n\t}\n}\nfunc slowFun(op int) int {\n\ttime.Sleep(time.Second* 1)\n\treturn op\n}\n\nfunc TestFn(t *testing.T) {\n\ta, b := returnMultiValues()\n\tt.Log(a, b)\n\ttsSF := timeSpent(slowFun)\n\tt.Log(tsSF(10))\n}\n\n\n```","slug":"go-函数","published":1,"updated":"2020-06-17T10:01:33.541Z","layout":"post","photos":[],"link":"","_id":"ckblkjn6k00080tpce4xdgqr8","content":"<ol>\n<li>可以有多个返回值</li>\n<li>所有参数都是值传递</li>\n<li>函数可以作为变量的值</li>\n<li>函数可以作为参数和返回值<a id=\"more\"></a>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> _func</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"math/rand\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"testing\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">returnMultiValues</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rand.Intn(<span class=\"number\">10</span>), rand.Intn(<span class=\"number\">20</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">timeSpent</span><span class=\"params\">(inner <span class=\"keyword\">func</span>(op <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span>) <span class=\"title\">func</span><span class=\"params\">(op <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(n <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\tret := inner(n)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"time spent:\"</span>, time.Since(start).Seconds())</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ret</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">slowFun</span><span class=\"params\">(op <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\ttime.Sleep(time.Second* <span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> op</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestFn</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\ta, b := returnMultiValues()</span><br><span class=\"line\">\tt.Log(a, b)</span><br><span class=\"line\">\ttsSF := timeSpent(slowFun)</span><br><span class=\"line\">\tt.Log(tsSF(<span class=\"number\">10</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"<ol>\n<li>可以有多个返回值</li>\n<li>所有参数都是值传递</li>\n<li>函数可以作为变量的值</li>\n<li>函数可以作为参数和返回值","more":"<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> _func</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"math/rand\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"testing\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">returnMultiValues</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rand.Intn(<span class=\"number\">10</span>), rand.Intn(<span class=\"number\">20</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">timeSpent</span><span class=\"params\">(inner <span class=\"keyword\">func</span>(op <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span>) <span class=\"title\">func</span><span class=\"params\">(op <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(n <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t\tstart := time.Now()</span><br><span class=\"line\">\t\tret := inner(n)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">\"time spent:\"</span>, time.Since(start).Seconds())</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ret</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">slowFun</span><span class=\"params\">(op <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\ttime.Sleep(time.Second* <span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> op</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestFn</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\ta, b := returnMultiValues()</span><br><span class=\"line\">\tt.Log(a, b)</span><br><span class=\"line\">\ttsSF := timeSpent(slowFun)</span><br><span class=\"line\">\tt.Log(tsSF(<span class=\"number\">10</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>"},{"title":"go-并发","date":"2020-06-17T10:01:33.541Z","comments":1,"_content":"\n**协程机制**\n\n> 定义方式 使用 go 关键字\n\n```go\nfunc TestMut(){\n    //定义协程\n    go func(){\n     // code \n    }()\n}\n```\n<!--more-->\n\n**互斥锁**\n\n> 使用 sync.Mutex 包\n\n* Unlock() 释放锁，建议在defer中使用，防止异常未释放锁\n* Lock() 加锁，操作之前加锁\n\n**线程等待**\n\n> 使用 sync.WaitGroup，类似 java 的 CountDownLatch\n\n* 启用协程 使用 add(1)\n* 协程结束后使用 Done()\n* 主线程使用 Wait()\n\n```go\nfunc TestG(t *testing.T) {\n\tvar waitGroup sync.WaitGroup\n\tvar mut sync.Mutex\n\tvar counter int\n\tfor i := 0; i < 5000; i++ {\n\t\twaitGroup.Add(1)\n\t\tgo func(i int) {\n\t\t\tdefer func() {\n\t\t\t\tmut.Unlock()\n\t\t\t}()\n\t\t\tmut.Lock()\n\t\t\tcounter++\n\t\t\twaitGroup.Done()\n\t\t}(i)\n\t}\n\twaitGroup.Wait()\n\tt.Log(counter)\n}\n```\n\n### CSP并发机制\n\n**channel**\n> 两种机制，1. make(chan string), 2. make(chan string, 5)\n\n* 机制1：通讯双方都必须存在，如果一方不存在，则另一方会阻塞。\n* 机制2：BufferChannel，发送和接收双方松耦合，容量未满的情况下，不会阻塞\n\n异步返回信息:\n\n```go\nfunc service() string {\n\t//time.Sleep(time.Millisecond * 50)\n\treturn \"执行业务操作中\"\n}\n\nfunc AsyncService() chan string {\n\tretCh := make(chan string, 5)\n\tgo func() {\n\t\tret := service()\n\t\tretCh <- ret\n\t}()\n\treturn retCh\n}\nfunc ohterTask() {\n\tfmt.Println(\"执行其他任务开始。\")\n\t//time.Sleep(time.Millisecond * 100)\n\tfmt.Println(\"执行其他任务结束。\")\n}\nfunc TestAsynService(t *testing.T) {\n\tretCh := AsyncService()\n\tohterTask()\n\tfmt.Println(<-retCh)\n}\n```\n\n**select 多路复用**\n\n> 与 switch 结构类似，当有channel 未阻塞时，执行case 所定义的部分，与case 定义顺序无关；可用 <- time.After 实现超时，当After未达到时间的时候，After会阻塞，当达到时间的时候，After不会阻塞。\n\n1. 结构定义示例：\n```go\nselect{\n    case ret:= <- xxx():\n        // code\n    case ret:= <- xxx():\n        // code \n    case <- time.After(time.Second *3)\n        // time out code\n    default:\n        // default code \n}\n```\n\n2. 示例\n```go\nfunc timeout() string {\n\ttime.Sleep(time.Second * 3)\n\treturn \"userInfo=======\"\n}\nfunc userInfo() chan string {\n\tuserCh := make(chan string)\n\tgo func() {\n\t\tret := timeout()\n\t\tuserCh <- ret\n\t}()\n\treturn userCh\n}\nfunc addressInfo() chan string {\n\taddCh := make(chan string)\n\tgo func() {\n\t\tret := func() string {\n\t\t\treturn \"address=======\"\n\t\t}\n\t\taddCh <- ret()\n\t}()\n\treturn addCh\n}\nfunc TestSel(t *testing.T) {\n\tselect {\n\tcase ret := <-userInfo():\n\t\tt.Log(ret)\n\t//case ret := <- addressInfo():\n\t//\tt.Log(ret)\n\tcase <-time.After(time.Second):\n\t\tt.Error(\"time out\")\n\t}\n}\n```\n\n**channel 的广播和关闭**\n\n> 定义两个 协程，一个往channel放数据，一个往channel取数据，channel放完后 close(channel)，获取的一方 判断时候正常获取。\n\n```go\nfunc provider(ch chan int, wg *sync.WaitGroup) {\n\tgo func() {\n\t\tfor i := 0; i < 200; i++ {\n\t\t\tch <- i\n\t\t}\n\t\tclose(ch)\n\t\twg.Done()\n\t}()\n}\nfunc receiver(ch chan int, wg *sync.WaitGroup) {\n\tgo func() {\n\t\tfor {\n\t\t\tif data,ok := <- ch; ok{\n\t\t\t\tfmt.Print(data,\" \")\n\t\t\t}else{\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\twg.Done()\n\t}()\n}\nfunc TestChClose(t *testing.T) {\n\tvar wg sync.WaitGroup\n\tch := make(chan int)\n\twg.Add(1)\n\tprovider(ch,&wg)\n\twg.Add(1)\n\treceiver(ch,&wg)\n\twg.Add(1)\n\treceiver(ch,&wg)\n\twg.Wait()\n}\n```\n\n**任务取消**\n\n* **context**\n// TODO\n","source":"_posts/go-并发.md","raw":"---\ntitle: go-并发\ndate: 2020年6月16日\ncomments: true\ncategories: go\ntags:\n---\n\n**协程机制**\n\n> 定义方式 使用 go 关键字\n\n```go\nfunc TestMut(){\n    //定义协程\n    go func(){\n     // code \n    }()\n}\n```\n<!--more-->\n\n**互斥锁**\n\n> 使用 sync.Mutex 包\n\n* Unlock() 释放锁，建议在defer中使用，防止异常未释放锁\n* Lock() 加锁，操作之前加锁\n\n**线程等待**\n\n> 使用 sync.WaitGroup，类似 java 的 CountDownLatch\n\n* 启用协程 使用 add(1)\n* 协程结束后使用 Done()\n* 主线程使用 Wait()\n\n```go\nfunc TestG(t *testing.T) {\n\tvar waitGroup sync.WaitGroup\n\tvar mut sync.Mutex\n\tvar counter int\n\tfor i := 0; i < 5000; i++ {\n\t\twaitGroup.Add(1)\n\t\tgo func(i int) {\n\t\t\tdefer func() {\n\t\t\t\tmut.Unlock()\n\t\t\t}()\n\t\t\tmut.Lock()\n\t\t\tcounter++\n\t\t\twaitGroup.Done()\n\t\t}(i)\n\t}\n\twaitGroup.Wait()\n\tt.Log(counter)\n}\n```\n\n### CSP并发机制\n\n**channel**\n> 两种机制，1. make(chan string), 2. make(chan string, 5)\n\n* 机制1：通讯双方都必须存在，如果一方不存在，则另一方会阻塞。\n* 机制2：BufferChannel，发送和接收双方松耦合，容量未满的情况下，不会阻塞\n\n异步返回信息:\n\n```go\nfunc service() string {\n\t//time.Sleep(time.Millisecond * 50)\n\treturn \"执行业务操作中\"\n}\n\nfunc AsyncService() chan string {\n\tretCh := make(chan string, 5)\n\tgo func() {\n\t\tret := service()\n\t\tretCh <- ret\n\t}()\n\treturn retCh\n}\nfunc ohterTask() {\n\tfmt.Println(\"执行其他任务开始。\")\n\t//time.Sleep(time.Millisecond * 100)\n\tfmt.Println(\"执行其他任务结束。\")\n}\nfunc TestAsynService(t *testing.T) {\n\tretCh := AsyncService()\n\tohterTask()\n\tfmt.Println(<-retCh)\n}\n```\n\n**select 多路复用**\n\n> 与 switch 结构类似，当有channel 未阻塞时，执行case 所定义的部分，与case 定义顺序无关；可用 <- time.After 实现超时，当After未达到时间的时候，After会阻塞，当达到时间的时候，After不会阻塞。\n\n1. 结构定义示例：\n```go\nselect{\n    case ret:= <- xxx():\n        // code\n    case ret:= <- xxx():\n        // code \n    case <- time.After(time.Second *3)\n        // time out code\n    default:\n        // default code \n}\n```\n\n2. 示例\n```go\nfunc timeout() string {\n\ttime.Sleep(time.Second * 3)\n\treturn \"userInfo=======\"\n}\nfunc userInfo() chan string {\n\tuserCh := make(chan string)\n\tgo func() {\n\t\tret := timeout()\n\t\tuserCh <- ret\n\t}()\n\treturn userCh\n}\nfunc addressInfo() chan string {\n\taddCh := make(chan string)\n\tgo func() {\n\t\tret := func() string {\n\t\t\treturn \"address=======\"\n\t\t}\n\t\taddCh <- ret()\n\t}()\n\treturn addCh\n}\nfunc TestSel(t *testing.T) {\n\tselect {\n\tcase ret := <-userInfo():\n\t\tt.Log(ret)\n\t//case ret := <- addressInfo():\n\t//\tt.Log(ret)\n\tcase <-time.After(time.Second):\n\t\tt.Error(\"time out\")\n\t}\n}\n```\n\n**channel 的广播和关闭**\n\n> 定义两个 协程，一个往channel放数据，一个往channel取数据，channel放完后 close(channel)，获取的一方 判断时候正常获取。\n\n```go\nfunc provider(ch chan int, wg *sync.WaitGroup) {\n\tgo func() {\n\t\tfor i := 0; i < 200; i++ {\n\t\t\tch <- i\n\t\t}\n\t\tclose(ch)\n\t\twg.Done()\n\t}()\n}\nfunc receiver(ch chan int, wg *sync.WaitGroup) {\n\tgo func() {\n\t\tfor {\n\t\t\tif data,ok := <- ch; ok{\n\t\t\t\tfmt.Print(data,\" \")\n\t\t\t}else{\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\twg.Done()\n\t}()\n}\nfunc TestChClose(t *testing.T) {\n\tvar wg sync.WaitGroup\n\tch := make(chan int)\n\twg.Add(1)\n\tprovider(ch,&wg)\n\twg.Add(1)\n\treceiver(ch,&wg)\n\twg.Add(1)\n\treceiver(ch,&wg)\n\twg.Wait()\n}\n```\n\n**任务取消**\n\n* **context**\n// TODO\n","slug":"go-并发","published":1,"updated":"2020-06-17T10:01:33.541Z","layout":"post","photos":[],"link":"","_id":"ckblkjn6m000a0tpcwwmgqtp2","content":"<p><strong>协程机制</strong></p>\n<blockquote>\n<p>定义方式 使用 go 关键字</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestMut</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义协程</span></span><br><span class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// code </span></span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<p><strong>互斥锁</strong></p>\n<blockquote>\n<p>使用 sync.Mutex 包</p>\n</blockquote>\n<ul>\n<li>Unlock() 释放锁，建议在defer中使用，防止异常未释放锁</li>\n<li>Lock() 加锁，操作之前加锁</li>\n</ul>\n<p><strong>线程等待</strong></p>\n<blockquote>\n<p>使用 sync.WaitGroup，类似 java 的 CountDownLatch</p>\n</blockquote>\n<ul>\n<li>启用协程 使用 add(1)</li>\n<li>协程结束后使用 Done()</li>\n<li>主线程使用 Wait()</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestG</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> waitGroup sync.WaitGroup</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mut sync.Mutex</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> counter <span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5000</span>; i++ &#123;</span><br><span class=\"line\">\t\twaitGroup.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t\tmut.Unlock()</span><br><span class=\"line\">\t\t\t&#125;()</span><br><span class=\"line\">\t\t\tmut.Lock()</span><br><span class=\"line\">\t\t\tcounter++</span><br><span class=\"line\">\t\t\twaitGroup.Done()</span><br><span class=\"line\">\t\t&#125;(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twaitGroup.Wait()</span><br><span class=\"line\">\tt.Log(counter)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CSP并发机制\"><a href=\"#CSP并发机制\" class=\"headerlink\" title=\"CSP并发机制\"></a>CSP并发机制</h3><p><strong>channel</strong></p>\n<blockquote>\n<p>两种机制，1. make(chan string), 2. make(chan string, 5)</p>\n</blockquote>\n<ul>\n<li>机制1：通讯双方都必须存在，如果一方不存在，则另一方会阻塞。</li>\n<li>机制2：BufferChannel，发送和接收双方松耦合，容量未满的情况下，不会阻塞</li>\n</ul>\n<p>异步返回信息:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">service</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//time.Sleep(time.Millisecond * 50)</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"执行业务操作中\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">AsyncService</span><span class=\"params\">()</span> <span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tretCh := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tret := service()</span><br><span class=\"line\">\t\tretCh &lt;- ret</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retCh</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ohterTask</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"执行其他任务开始。\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//time.Sleep(time.Millisecond * 100)</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"执行其他任务结束。\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestAsynService</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tretCh := AsyncService()</span><br><span class=\"line\">\tohterTask()</span><br><span class=\"line\">\tfmt.Println(&lt;-retCh)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>select 多路复用</strong></p>\n<blockquote>\n<p>与 switch 结构类似，当有channel 未阻塞时，执行case 所定义的部分，与case 定义顺序无关；可用 &lt;- time.After 实现超时，当After未达到时间的时候，After会阻塞，当达到时间的时候，After不会阻塞。</p>\n</blockquote>\n<ol>\n<li><p>结构定义示例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> ret:= &lt;- xxx():</span><br><span class=\"line\">        <span class=\"comment\">// code</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> ret:= &lt;- xxx():</span><br><span class=\"line\">        <span class=\"comment\">// code </span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;- time.After(time.Second *<span class=\"number\">3</span>)</span><br><span class=\"line\">        <span class=\"comment\">// time out code</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"comment\">// default code </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>示例</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">timeout</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\ttime.Sleep(time.Second * <span class=\"number\">3</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"userInfo=======\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">userInfo</span><span class=\"params\">()</span> <span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tuserCh := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tret := timeout()</span><br><span class=\"line\">\t\tuserCh &lt;- ret</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> userCh</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addressInfo</span><span class=\"params\">()</span> <span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\taddCh := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tret := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"address=======\"</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\taddCh &lt;- ret()</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> addCh</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestSel</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> ret := &lt;-userInfo():</span><br><span class=\"line\">\t\tt.Log(ret)</span><br><span class=\"line\">\t<span class=\"comment\">//case ret := &lt;- addressInfo():</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tt.Log(ret)</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> &lt;-time.After(time.Second):</span><br><span class=\"line\">\t\tt.Error(<span class=\"string\">\"time out\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><strong>channel 的广播和关闭</strong></p>\n<blockquote>\n<p>定义两个 协程，一个往channel放数据，一个往channel取数据，channel放完后 close(channel)，获取的一方 判断时候正常获取。</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">provider</span><span class=\"params\">(ch <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, wg *sync.WaitGroup)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">200</span>; i++ &#123;</span><br><span class=\"line\">\t\t\tch &lt;- i</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">close</span>(ch)</span><br><span class=\"line\">\t\twg.Done()</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">receiver</span><span class=\"params\">(ch <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, wg *sync.WaitGroup)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> data,ok := &lt;- ch; ok&#123;</span><br><span class=\"line\">\t\t\t\tfmt.Print(data,<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\twg.Done()</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestChClose</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">\tch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span><br><span class=\"line\">\twg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">\tprovider(ch,&amp;wg)</span><br><span class=\"line\">\twg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">\treceiver(ch,&amp;wg)</span><br><span class=\"line\">\twg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">\treceiver(ch,&amp;wg)</span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>任务取消</strong></p>\n<ul>\n<li><strong>context</strong><br>// TODO</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><strong>协程机制</strong></p>\n<blockquote>\n<p>定义方式 使用 go 关键字</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestMut</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//定义协程</span></span><br><span class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// code </span></span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p><strong>互斥锁</strong></p>\n<blockquote>\n<p>使用 sync.Mutex 包</p>\n</blockquote>\n<ul>\n<li>Unlock() 释放锁，建议在defer中使用，防止异常未释放锁</li>\n<li>Lock() 加锁，操作之前加锁</li>\n</ul>\n<p><strong>线程等待</strong></p>\n<blockquote>\n<p>使用 sync.WaitGroup，类似 java 的 CountDownLatch</p>\n</blockquote>\n<ul>\n<li>启用协程 使用 add(1)</li>\n<li>协程结束后使用 Done()</li>\n<li>主线程使用 Wait()</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestG</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> waitGroup sync.WaitGroup</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mut sync.Mutex</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> counter <span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5000</span>; i++ &#123;</span><br><span class=\"line\">\t\twaitGroup.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t\tmut.Unlock()</span><br><span class=\"line\">\t\t\t&#125;()</span><br><span class=\"line\">\t\t\tmut.Lock()</span><br><span class=\"line\">\t\t\tcounter++</span><br><span class=\"line\">\t\t\twaitGroup.Done()</span><br><span class=\"line\">\t\t&#125;(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twaitGroup.Wait()</span><br><span class=\"line\">\tt.Log(counter)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CSP并发机制\"><a href=\"#CSP并发机制\" class=\"headerlink\" title=\"CSP并发机制\"></a>CSP并发机制</h3><p><strong>channel</strong></p>\n<blockquote>\n<p>两种机制，1. make(chan string), 2. make(chan string, 5)</p>\n</blockquote>\n<ul>\n<li>机制1：通讯双方都必须存在，如果一方不存在，则另一方会阻塞。</li>\n<li>机制2：BufferChannel，发送和接收双方松耦合，容量未满的情况下，不会阻塞</li>\n</ul>\n<p>异步返回信息:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">service</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//time.Sleep(time.Millisecond * 50)</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"执行业务操作中\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">AsyncService</span><span class=\"params\">()</span> <span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tretCh := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tret := service()</span><br><span class=\"line\">\t\tretCh &lt;- ret</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retCh</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ohterTask</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"执行其他任务开始。\"</span>)</span><br><span class=\"line\">\t<span class=\"comment\">//time.Sleep(time.Millisecond * 100)</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"执行其他任务结束。\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestAsynService</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tretCh := AsyncService()</span><br><span class=\"line\">\tohterTask()</span><br><span class=\"line\">\tfmt.Println(&lt;-retCh)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>select 多路复用</strong></p>\n<blockquote>\n<p>与 switch 结构类似，当有channel 未阻塞时，执行case 所定义的部分，与case 定义顺序无关；可用 &lt;- time.After 实现超时，当After未达到时间的时候，After会阻塞，当达到时间的时候，After不会阻塞。</p>\n</blockquote>\n<ol>\n<li><p>结构定义示例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> ret:= &lt;- xxx():</span><br><span class=\"line\">        <span class=\"comment\">// code</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> ret:= &lt;- xxx():</span><br><span class=\"line\">        <span class=\"comment\">// code </span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;- time.After(time.Second *<span class=\"number\">3</span>)</span><br><span class=\"line\">        <span class=\"comment\">// time out code</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"comment\">// default code </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>示例</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">timeout</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\ttime.Sleep(time.Second * <span class=\"number\">3</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"userInfo=======\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">userInfo</span><span class=\"params\">()</span> <span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tuserCh := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tret := timeout()</span><br><span class=\"line\">\t\tuserCh &lt;- ret</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> userCh</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addressInfo</span><span class=\"params\">()</span> <span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\taddCh := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tret := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"address=======\"</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\taddCh &lt;- ret()</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> addCh</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestSel</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> ret := &lt;-userInfo():</span><br><span class=\"line\">\t\tt.Log(ret)</span><br><span class=\"line\">\t<span class=\"comment\">//case ret := &lt;- addressInfo():</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tt.Log(ret)</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> &lt;-time.After(time.Second):</span><br><span class=\"line\">\t\tt.Error(<span class=\"string\">\"time out\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><strong>channel 的广播和关闭</strong></p>\n<blockquote>\n<p>定义两个 协程，一个往channel放数据，一个往channel取数据，channel放完后 close(channel)，获取的一方 判断时候正常获取。</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">provider</span><span class=\"params\">(ch <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, wg *sync.WaitGroup)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">200</span>; i++ &#123;</span><br><span class=\"line\">\t\t\tch &lt;- i</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">close</span>(ch)</span><br><span class=\"line\">\t\twg.Done()</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">receiver</span><span class=\"params\">(ch <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>, wg *sync.WaitGroup)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> data,ok := &lt;- ch; ok&#123;</span><br><span class=\"line\">\t\t\t\tfmt.Print(data,<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\twg.Done()</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestChClose</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">\tch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span><br><span class=\"line\">\twg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">\tprovider(ch,&amp;wg)</span><br><span class=\"line\">\twg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">\treceiver(ch,&amp;wg)</span><br><span class=\"line\">\twg.Add(<span class=\"number\">1</span>)</span><br><span class=\"line\">\treceiver(ch,&amp;wg)</span><br><span class=\"line\">\twg.Wait()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>任务取消</strong></p>\n<ul>\n<li><strong>context</strong><br>// TODO</li>\n</ul>"},{"title":"go-数组和切片","date":"2020-06-17T10:01:33.541Z","comments":1,"_content":"\n**数组声明和遍历**\n\n```go\nfunc TestArrayInit(t *testing.T) {\n\tvar arr [3]int\n\tarr1 := [4]int{1, 2, 3, 4}\n\tarr2 := [...]int{1, 2, 3, 4, 5, 6}\n\tt.Log(arr[0], arr[1])\n\tt.Log(arr1,arr2)\n}\n\nfunc TestArrayTravel(t *testing.T) {\n\tarr3 := [...]int{1, 2, 3, 4, 5}\n\tfor i,e := range arr3{\n\t\tt.Log(i,e)\n\t}\n}\n```\n<!--more-->\n**数组截取**\n* a[开始索引(包含),结束索引(不包含)]\n* a[3:],a[:3] \n\n```go\nfunc TestArraySection(t *testing.T) {\n\tarr3 := [...]int{1, 2, 3, 4, 5}\n\tarr3_sec := arr3[3:]\n\tt.Log(arr3_sec)\n}\n```\n\n**切片slice**\n```go\nfunc TestSliceInit(t *testing.T) {\n\tvar slice []int\n\tt.Log(len(slice), cap(slice))\n\tslice = append(slice, 1)\n\tt.Log(len(slice), cap(slice))\n\n\ts1 := []int{1, 2, 3, 4}\n\tt.Log(len(s1), cap(s1))\n\n\ts2 := make([]int, 3, 5)\n\tt.Log(len(s2), cap(s2))\n\tt.Log(s2[0], s2[1], s2[2])\n}\n```\n**切片扩容**\n> 容量会 *2 扩展\n```go\nfunc TestSliceGrowing(t *testing.T) {\n\tvar s []int\n\tfor i := 0; i < 10; i++ {\n\t\ts = append(s, i)\n\t\tt.Log(len(s),cap(s))\n\t}\n}\n```\n\n**切片共享存储结构**\n\n> 修改一个值会影响到其他的值\n\n```go\nfunc TestSliceShareMemory(t *testing.T) {\n\tyear := []string{\n\t\t\"一月\", \"二月\", \"三月\", \"四月\",\n\t\t\"五月\", \"六月\", \"七月\", \"八月\",\n\t\t\"九月\", \"十月\", \"十一月\", \"十二月\",\n\t}\n\tQ2 := year[3:6]\n\tt.Log(Q2, len(Q2), cap(Q2))\n\tsummer := year[5:8]\n\tt.Log(summer,len(summer),cap(summer))\n\tsummer[0] = \"Unknow\"\n\tt.Log(Q2)\n\tt.Log(year)\n}\n```\n\n**数组和切片的区别**\n1. 容量是否可伸缩\n2. 是否可以进行比较","source":"_posts/go-数组和切片.md","raw":"---\ntitle: go-数组和切片\ndate: 2020年6月16日\ncomments: true\ncategories: go\ntags:\n---\n\n**数组声明和遍历**\n\n```go\nfunc TestArrayInit(t *testing.T) {\n\tvar arr [3]int\n\tarr1 := [4]int{1, 2, 3, 4}\n\tarr2 := [...]int{1, 2, 3, 4, 5, 6}\n\tt.Log(arr[0], arr[1])\n\tt.Log(arr1,arr2)\n}\n\nfunc TestArrayTravel(t *testing.T) {\n\tarr3 := [...]int{1, 2, 3, 4, 5}\n\tfor i,e := range arr3{\n\t\tt.Log(i,e)\n\t}\n}\n```\n<!--more-->\n**数组截取**\n* a[开始索引(包含),结束索引(不包含)]\n* a[3:],a[:3] \n\n```go\nfunc TestArraySection(t *testing.T) {\n\tarr3 := [...]int{1, 2, 3, 4, 5}\n\tarr3_sec := arr3[3:]\n\tt.Log(arr3_sec)\n}\n```\n\n**切片slice**\n```go\nfunc TestSliceInit(t *testing.T) {\n\tvar slice []int\n\tt.Log(len(slice), cap(slice))\n\tslice = append(slice, 1)\n\tt.Log(len(slice), cap(slice))\n\n\ts1 := []int{1, 2, 3, 4}\n\tt.Log(len(s1), cap(s1))\n\n\ts2 := make([]int, 3, 5)\n\tt.Log(len(s2), cap(s2))\n\tt.Log(s2[0], s2[1], s2[2])\n}\n```\n**切片扩容**\n> 容量会 *2 扩展\n```go\nfunc TestSliceGrowing(t *testing.T) {\n\tvar s []int\n\tfor i := 0; i < 10; i++ {\n\t\ts = append(s, i)\n\t\tt.Log(len(s),cap(s))\n\t}\n}\n```\n\n**切片共享存储结构**\n\n> 修改一个值会影响到其他的值\n\n```go\nfunc TestSliceShareMemory(t *testing.T) {\n\tyear := []string{\n\t\t\"一月\", \"二月\", \"三月\", \"四月\",\n\t\t\"五月\", \"六月\", \"七月\", \"八月\",\n\t\t\"九月\", \"十月\", \"十一月\", \"十二月\",\n\t}\n\tQ2 := year[3:6]\n\tt.Log(Q2, len(Q2), cap(Q2))\n\tsummer := year[5:8]\n\tt.Log(summer,len(summer),cap(summer))\n\tsummer[0] = \"Unknow\"\n\tt.Log(Q2)\n\tt.Log(year)\n}\n```\n\n**数组和切片的区别**\n1. 容量是否可伸缩\n2. 是否可以进行比较","slug":"go-数组和切片","published":1,"updated":"2020-06-17T10:01:33.541Z","layout":"post","photos":[],"link":"","_id":"ckblkjn6o000b0tpc2mwkck1n","content":"<p><strong>数组声明和遍历</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestArrayInit</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr [<span class=\"number\">3</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">\tarr1 := [<span class=\"number\">4</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tarr2 := [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;</span><br><span class=\"line\">\tt.Log(arr[<span class=\"number\">0</span>], arr[<span class=\"number\">1</span>])</span><br><span class=\"line\">\tt.Log(arr1,arr2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestArrayTravel</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tarr3 := [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i,e := <span class=\"keyword\">range</span> arr3&#123;</span><br><span class=\"line\">\t\tt.Log(i,e)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n<p><strong>数组截取</strong></p>\n<ul>\n<li>a[开始索引(包含),结束索引(不包含)]</li>\n<li>a[3:],a[:3] </li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestArraySection</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tarr3 := [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">\tarr3_sec := arr3[<span class=\"number\">3</span>:]</span><br><span class=\"line\">\tt.Log(arr3_sec)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>切片slice</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestSliceInit</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> slice []<span class=\"keyword\">int</span></span><br><span class=\"line\">\tt.Log(<span class=\"built_in\">len</span>(slice), <span class=\"built_in\">cap</span>(slice))</span><br><span class=\"line\">\tslice = <span class=\"built_in\">append</span>(slice, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tt.Log(<span class=\"built_in\">len</span>(slice), <span class=\"built_in\">cap</span>(slice))</span><br><span class=\"line\"></span><br><span class=\"line\">\ts1 := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tt.Log(<span class=\"built_in\">len</span>(s1), <span class=\"built_in\">cap</span>(s1))</span><br><span class=\"line\"></span><br><span class=\"line\">\ts2 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">\tt.Log(<span class=\"built_in\">len</span>(s2), <span class=\"built_in\">cap</span>(s2))</span><br><span class=\"line\">\tt.Log(s2[<span class=\"number\">0</span>], s2[<span class=\"number\">1</span>], s2[<span class=\"number\">2</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>切片扩容</strong></p>\n<blockquote>\n<p>容量会 *2 扩展</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestSliceGrowing</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s []<span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\ts = <span class=\"built_in\">append</span>(s, i)</span><br><span class=\"line\">\t\tt.Log(<span class=\"built_in\">len</span>(s),<span class=\"built_in\">cap</span>(s))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>切片共享存储结构</strong></p>\n<blockquote>\n<p>修改一个值会影响到其他的值</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestSliceShareMemory</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tyear := []<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"一月\"</span>, <span class=\"string\">\"二月\"</span>, <span class=\"string\">\"三月\"</span>, <span class=\"string\">\"四月\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"五月\"</span>, <span class=\"string\">\"六月\"</span>, <span class=\"string\">\"七月\"</span>, <span class=\"string\">\"八月\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"九月\"</span>, <span class=\"string\">\"十月\"</span>, <span class=\"string\">\"十一月\"</span>, <span class=\"string\">\"十二月\"</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tQ2 := year[<span class=\"number\">3</span>:<span class=\"number\">6</span>]</span><br><span class=\"line\">\tt.Log(Q2, <span class=\"built_in\">len</span>(Q2), <span class=\"built_in\">cap</span>(Q2))</span><br><span class=\"line\">\tsummer := year[<span class=\"number\">5</span>:<span class=\"number\">8</span>]</span><br><span class=\"line\">\tt.Log(summer,<span class=\"built_in\">len</span>(summer),<span class=\"built_in\">cap</span>(summer))</span><br><span class=\"line\">\tsummer[<span class=\"number\">0</span>] = <span class=\"string\">\"Unknow\"</span></span><br><span class=\"line\">\tt.Log(Q2)</span><br><span class=\"line\">\tt.Log(year)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>数组和切片的区别</strong></p>\n<ol>\n<li>容量是否可伸缩</li>\n<li>是否可以进行比较</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p><strong>数组声明和遍历</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestArrayInit</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> arr [<span class=\"number\">3</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">\tarr1 := [<span class=\"number\">4</span>]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tarr2 := [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;</span><br><span class=\"line\">\tt.Log(arr[<span class=\"number\">0</span>], arr[<span class=\"number\">1</span>])</span><br><span class=\"line\">\tt.Log(arr1,arr2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestArrayTravel</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tarr3 := [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i,e := <span class=\"keyword\">range</span> arr3&#123;</span><br><span class=\"line\">\t\tt.Log(i,e)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p><strong>数组截取</strong></p>\n<ul>\n<li>a[开始索引(包含),结束索引(不包含)]</li>\n<li>a[3:],a[:3] </li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestArraySection</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tarr3 := [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\">\tarr3_sec := arr3[<span class=\"number\">3</span>:]</span><br><span class=\"line\">\tt.Log(arr3_sec)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>切片slice</strong></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestSliceInit</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> slice []<span class=\"keyword\">int</span></span><br><span class=\"line\">\tt.Log(<span class=\"built_in\">len</span>(slice), <span class=\"built_in\">cap</span>(slice))</span><br><span class=\"line\">\tslice = <span class=\"built_in\">append</span>(slice, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tt.Log(<span class=\"built_in\">len</span>(slice), <span class=\"built_in\">cap</span>(slice))</span><br><span class=\"line\"></span><br><span class=\"line\">\ts1 := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tt.Log(<span class=\"built_in\">len</span>(s1), <span class=\"built_in\">cap</span>(s1))</span><br><span class=\"line\"></span><br><span class=\"line\">\ts2 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">\tt.Log(<span class=\"built_in\">len</span>(s2), <span class=\"built_in\">cap</span>(s2))</span><br><span class=\"line\">\tt.Log(s2[<span class=\"number\">0</span>], s2[<span class=\"number\">1</span>], s2[<span class=\"number\">2</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>切片扩容</strong></p>\n<blockquote>\n<p>容量会 *2 扩展</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestSliceGrowing</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s []<span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\ts = <span class=\"built_in\">append</span>(s, i)</span><br><span class=\"line\">\t\tt.Log(<span class=\"built_in\">len</span>(s),<span class=\"built_in\">cap</span>(s))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>切片共享存储结构</strong></p>\n<blockquote>\n<p>修改一个值会影响到其他的值</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestSliceShareMemory</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tyear := []<span class=\"keyword\">string</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"一月\"</span>, <span class=\"string\">\"二月\"</span>, <span class=\"string\">\"三月\"</span>, <span class=\"string\">\"四月\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"五月\"</span>, <span class=\"string\">\"六月\"</span>, <span class=\"string\">\"七月\"</span>, <span class=\"string\">\"八月\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"九月\"</span>, <span class=\"string\">\"十月\"</span>, <span class=\"string\">\"十一月\"</span>, <span class=\"string\">\"十二月\"</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tQ2 := year[<span class=\"number\">3</span>:<span class=\"number\">6</span>]</span><br><span class=\"line\">\tt.Log(Q2, <span class=\"built_in\">len</span>(Q2), <span class=\"built_in\">cap</span>(Q2))</span><br><span class=\"line\">\tsummer := year[<span class=\"number\">5</span>:<span class=\"number\">8</span>]</span><br><span class=\"line\">\tt.Log(summer,<span class=\"built_in\">len</span>(summer),<span class=\"built_in\">cap</span>(summer))</span><br><span class=\"line\">\tsummer[<span class=\"number\">0</span>] = <span class=\"string\">\"Unknow\"</span></span><br><span class=\"line\">\tt.Log(Q2)</span><br><span class=\"line\">\tt.Log(year)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>数组和切片的区别</strong></p>\n<ol>\n<li>容量是否可伸缩</li>\n<li>是否可以进行比较</li>\n</ol>"},{"title":"java-使用google.zxing生成二维码","date":"2020-06-17T12:22:47.101Z","updated":"2020-06-17T12:22:47.101Z","comments":1,"_content":"\n### 1. 导入maven依赖\n\n```java\n<dependency>\n    <groupId>com.google.zxing</groupId>\n    <artifactId>core</artifactId>\n    <version>3.1.0</version>\n</dependency>\n<dependency>\n    <groupId>com.google.zxing</groupId>\n    <artifactId>javase</artifactId>\n    <version>3.1.0</version>\n</dependency>\n```\n\n<!--more-->\n\n### 2. 二维码工具类\n\n```java\npackage com.odp.api.common.utils;\n\nimport com.google.zxing.BarcodeFormat;\nimport com.google.zxing.EncodeHintType;\nimport com.google.zxing.MultiFormatWriter;\nimport com.google.zxing.common.BitMatrix;\nimport com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;\n\nimport java.awt.image.BufferedImage;\nimport java.util.Hashtable;\n\n/**\n * @Author: hou_fx\n * @Description:\n * @Data: created in  下午6:02 2019/11/28\n */\npublic class QRCodeUtil {\n    private static final String CHARSET = \"utf-8\";\n    public static BufferedImage createImage(String content, int width, int height ) throws Exception {\n        Hashtable<EncodeHintType, Object> hints = new Hashtable<EncodeHintType, Object>();\n        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);\n        hints.put(EncodeHintType.CHARACTER_SET, CHARSET);\n        hints.put(EncodeHintType.MARGIN, 1);\n        BitMatrix bitMatrix = new MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, width, height,\n                hints);\n        width = bitMatrix.getWidth();\n        height = bitMatrix.getHeight();\n        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n        for (int x = 0; x < width; x++) {\n            for (int y = 0; y < height; y++) {\n                image.setRGB(x, y, bitMatrix.get(x, y) ? 0xFF000000 : 0xFFFFFFFF);\n            }\n        }\n        return image;\n    }\n}\n```\n\n### 3. 生成二维码图片\n\n    调用工具类生成二维码，返回BufferedImage,根据需求将图片转为需要的数据,如转为base64等、\n\n```java\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nBufferedImage image = QRCodeUtil.createImage(targetUrl, 460, 460);\nImageIO.write(image, \"PNG\", baos);\nBase64.getEncoder().encodeToString(baos.toByteArray());\n```\n\n### 4. 效果图\n\n    在浏览器中，可用 data:image/png;base64 ,查看base64图片,如\n\n![](/images/2020-06-17-18-39-53-image.png)\n","source":"_posts/java-使用google.zxing生成二维码.md","raw":"---\ntitle: java-使用google.zxing生成二维码\ndate: 2020年6月16日\nupdated: 2020年6月17日\ncomments: true\ncategories: java\ntags:\n- 二维码\n---\n\n### 1. 导入maven依赖\n\n```java\n<dependency>\n    <groupId>com.google.zxing</groupId>\n    <artifactId>core</artifactId>\n    <version>3.1.0</version>\n</dependency>\n<dependency>\n    <groupId>com.google.zxing</groupId>\n    <artifactId>javase</artifactId>\n    <version>3.1.0</version>\n</dependency>\n```\n\n<!--more-->\n\n### 2. 二维码工具类\n\n```java\npackage com.odp.api.common.utils;\n\nimport com.google.zxing.BarcodeFormat;\nimport com.google.zxing.EncodeHintType;\nimport com.google.zxing.MultiFormatWriter;\nimport com.google.zxing.common.BitMatrix;\nimport com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;\n\nimport java.awt.image.BufferedImage;\nimport java.util.Hashtable;\n\n/**\n * @Author: hou_fx\n * @Description:\n * @Data: created in  下午6:02 2019/11/28\n */\npublic class QRCodeUtil {\n    private static final String CHARSET = \"utf-8\";\n    public static BufferedImage createImage(String content, int width, int height ) throws Exception {\n        Hashtable<EncodeHintType, Object> hints = new Hashtable<EncodeHintType, Object>();\n        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);\n        hints.put(EncodeHintType.CHARACTER_SET, CHARSET);\n        hints.put(EncodeHintType.MARGIN, 1);\n        BitMatrix bitMatrix = new MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, width, height,\n                hints);\n        width = bitMatrix.getWidth();\n        height = bitMatrix.getHeight();\n        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n        for (int x = 0; x < width; x++) {\n            for (int y = 0; y < height; y++) {\n                image.setRGB(x, y, bitMatrix.get(x, y) ? 0xFF000000 : 0xFFFFFFFF);\n            }\n        }\n        return image;\n    }\n}\n```\n\n### 3. 生成二维码图片\n\n    调用工具类生成二维码，返回BufferedImage,根据需求将图片转为需要的数据,如转为base64等、\n\n```java\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nBufferedImage image = QRCodeUtil.createImage(targetUrl, 460, 460);\nImageIO.write(image, \"PNG\", baos);\nBase64.getEncoder().encodeToString(baos.toByteArray());\n```\n\n### 4. 效果图\n\n    在浏览器中，可用 data:image/png;base64 ,查看base64图片,如\n\n![](/images/2020-06-17-18-39-53-image.png)\n","slug":"java-使用google.zxing生成二维码","published":1,"layout":"post","photos":[],"link":"","_id":"ckblkjn6p000e0tpc0rmiq1m9","content":"<h3 id=\"1-导入maven依赖\"><a href=\"#1-导入maven依赖\" class=\"headerlink\" title=\"1. 导入maven依赖\"></a>1. 导入maven依赖</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;core&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;javase&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h3 id=\"2-二维码工具类\"><a href=\"#2-二维码工具类\" class=\"headerlink\" title=\"2. 二维码工具类\"></a>2. 二维码工具类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.odp.api.common.utils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.BarcodeFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.EncodeHintType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.MultiFormatWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.common.BitMatrix;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Hashtable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: hou_fx</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Data</span>: created in  下午6:02 2019/11/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QRCodeUtil</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CHARSET = <span class=\"string\">\"utf-8\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BufferedImage <span class=\"title\">createImage</span><span class=\"params\">(String content, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height )</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Hashtable&lt;EncodeHintType, Object&gt; hints = <span class=\"keyword\">new</span> Hashtable&lt;EncodeHintType, Object&gt;();</span><br><span class=\"line\">        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);</span><br><span class=\"line\">        hints.put(EncodeHintType.CHARACTER_SET, CHARSET);</span><br><span class=\"line\">        hints.put(EncodeHintType.MARGIN, <span class=\"number\">1</span>);</span><br><span class=\"line\">        BitMatrix bitMatrix = <span class=\"keyword\">new</span> MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, width, height,</span><br><span class=\"line\">                hints);</span><br><span class=\"line\">        width = bitMatrix.getWidth();</span><br><span class=\"line\">        height = bitMatrix.getHeight();</span><br><span class=\"line\">        BufferedImage image = <span class=\"keyword\">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; width; x++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> y = <span class=\"number\">0</span>; y &lt; height; y++) &#123;</span><br><span class=\"line\">                image.setRGB(x, y, bitMatrix.get(x, y) ? <span class=\"number\">0xFF000000</span> : <span class=\"number\">0xFFFFFFFF</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> image;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-生成二维码图片\"><a href=\"#3-生成二维码图片\" class=\"headerlink\" title=\"3. 生成二维码图片\"></a>3. 生成二维码图片</h3><pre><code>调用工具类生成二维码，返回BufferedImage,根据需求将图片转为需要的数据,如转为base64等、</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteArrayOutputStream baos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">BufferedImage image = QRCodeUtil.createImage(targetUrl, <span class=\"number\">460</span>, <span class=\"number\">460</span>);</span><br><span class=\"line\">ImageIO.write(image, <span class=\"string\">\"PNG\"</span>, baos);</span><br><span class=\"line\">Base64.getEncoder().encodeToString(baos.toByteArray());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-效果图\"><a href=\"#4-效果图\" class=\"headerlink\" title=\"4. 效果图\"></a>4. 效果图</h3><pre><code>在浏览器中，可用 data:image/png;base64 ,查看base64图片,如</code></pre><p><img src=\"/images/2020-06-17-18-39-53-image.png\" alt></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-导入maven依赖\"><a href=\"#1-导入maven依赖\" class=\"headerlink\" title=\"1. 导入maven依赖\"></a>1. 导入maven依赖</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;core&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.google.zxing&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;javase&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"2-二维码工具类\"><a href=\"#2-二维码工具类\" class=\"headerlink\" title=\"2. 二维码工具类\"></a>2. 二维码工具类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.odp.api.common.utils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.BarcodeFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.EncodeHintType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.MultiFormatWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.common.BitMatrix;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Hashtable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: hou_fx</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Data</span>: created in  下午6:02 2019/11/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QRCodeUtil</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CHARSET = <span class=\"string\">\"utf-8\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BufferedImage <span class=\"title\">createImage</span><span class=\"params\">(String content, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height )</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Hashtable&lt;EncodeHintType, Object&gt; hints = <span class=\"keyword\">new</span> Hashtable&lt;EncodeHintType, Object&gt;();</span><br><span class=\"line\">        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);</span><br><span class=\"line\">        hints.put(EncodeHintType.CHARACTER_SET, CHARSET);</span><br><span class=\"line\">        hints.put(EncodeHintType.MARGIN, <span class=\"number\">1</span>);</span><br><span class=\"line\">        BitMatrix bitMatrix = <span class=\"keyword\">new</span> MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, width, height,</span><br><span class=\"line\">                hints);</span><br><span class=\"line\">        width = bitMatrix.getWidth();</span><br><span class=\"line\">        height = bitMatrix.getHeight();</span><br><span class=\"line\">        BufferedImage image = <span class=\"keyword\">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; width; x++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> y = <span class=\"number\">0</span>; y &lt; height; y++) &#123;</span><br><span class=\"line\">                image.setRGB(x, y, bitMatrix.get(x, y) ? <span class=\"number\">0xFF000000</span> : <span class=\"number\">0xFFFFFFFF</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> image;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-生成二维码图片\"><a href=\"#3-生成二维码图片\" class=\"headerlink\" title=\"3. 生成二维码图片\"></a>3. 生成二维码图片</h3><pre><code>调用工具类生成二维码，返回BufferedImage,根据需求将图片转为需要的数据,如转为base64等、</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteArrayOutputStream baos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">BufferedImage image = QRCodeUtil.createImage(targetUrl, <span class=\"number\">460</span>, <span class=\"number\">460</span>);</span><br><span class=\"line\">ImageIO.write(image, <span class=\"string\">\"PNG\"</span>, baos);</span><br><span class=\"line\">Base64.getEncoder().encodeToString(baos.toByteArray());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-效果图\"><a href=\"#4-效果图\" class=\"headerlink\" title=\"4. 效果图\"></a>4. 效果图</h3><pre><code>在浏览器中，可用 data:image/png;base64 ,查看base64图片,如</code></pre><p><img src=\"/images/2020-06-17-18-39-53-image.png\" alt></p>"},{"title":"go-运算符","date":"2020-06-17T10:01:33.541Z","comments":1,"_content":"\n* Go 语言没有前置的 ++ -- 如： ++1,--1\n* 用 == 比较数组\n1. 相同维度数组且含有相同个数元素的数组才可以比较\n2. 每个元都有相同的才相等\n```go\nfunc TestCompareArray(t *testing.T) {\n\ta := [...]int{1, 2, 3, 4}\n\t//b := [...]int{1, 2, 3, 4, 5}\n\tc := [...]int{1, 2, 3, 4}\n\td := [...]int{1, 2, 3, 6}\n\t//t.Log(a == b)\n\tt.Log(a == c,a==d)\n}\n```\n<!--more-->\n* 位运算符\n\n> &^ 按位清零，对于两个操作数来说，只要是右边位数为1，无论左边操作位数是0还是1，都会把左边位数清零，如果右边位数为0，那左边原来是什么就是什么\n\n1 &^ 0 -- 1\n\n1 &^1 --0\n\n0 &^1 --0\n\n0 &^ 0 --0\n\n```go\nconst (\n\tReadable = 1 << iota // 1 << 0 = 1\n\tWritable\t\t\t// 1 << 1 = 2\n\tExecutable\t\t\t// 1 << 2 = 4\n)\nfunc TestBitClean(t *testing.T) {\n\ta := 7 // 0111\n\ta = a&^ Readable\n\tt.Log(a&Readable == Readable, a&Writable == Writable, a&Executable == Executable)\n\tt.Log(a &^ Readable)\n}\n\n```","source":"_posts/go-运算符.md","raw":"---\ntitle: go-运算符\ndate: 2020年6月16日\ncomments: true\ncategories: go\ntags:\n---\n\n* Go 语言没有前置的 ++ -- 如： ++1,--1\n* 用 == 比较数组\n1. 相同维度数组且含有相同个数元素的数组才可以比较\n2. 每个元都有相同的才相等\n```go\nfunc TestCompareArray(t *testing.T) {\n\ta := [...]int{1, 2, 3, 4}\n\t//b := [...]int{1, 2, 3, 4, 5}\n\tc := [...]int{1, 2, 3, 4}\n\td := [...]int{1, 2, 3, 6}\n\t//t.Log(a == b)\n\tt.Log(a == c,a==d)\n}\n```\n<!--more-->\n* 位运算符\n\n> &^ 按位清零，对于两个操作数来说，只要是右边位数为1，无论左边操作位数是0还是1，都会把左边位数清零，如果右边位数为0，那左边原来是什么就是什么\n\n1 &^ 0 -- 1\n\n1 &^1 --0\n\n0 &^1 --0\n\n0 &^ 0 --0\n\n```go\nconst (\n\tReadable = 1 << iota // 1 << 0 = 1\n\tWritable\t\t\t// 1 << 1 = 2\n\tExecutable\t\t\t// 1 << 2 = 4\n)\nfunc TestBitClean(t *testing.T) {\n\ta := 7 // 0111\n\ta = a&^ Readable\n\tt.Log(a&Readable == Readable, a&Writable == Writable, a&Executable == Executable)\n\tt.Log(a &^ Readable)\n}\n\n```","slug":"go-运算符","published":1,"updated":"2020-06-17T10:01:33.541Z","layout":"post","photos":[],"link":"","_id":"ckblkjn6r000g0tpc78eyeni7","content":"<ul>\n<li>Go 语言没有前置的 ++ – 如： ++1,–1</li>\n<li>用 == 比较数组</li>\n</ul>\n<ol>\n<li>相同维度数组且含有相同个数元素的数组才可以比较</li>\n<li>每个元都有相同的才相等<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestCompareArray</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\ta := [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//b := [...]int&#123;1, 2, 3, 4, 5&#125;</span></span><br><span class=\"line\">\tc := [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\td := [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//t.Log(a == b)</span></span><br><span class=\"line\">\tt.Log(a == c,a==d)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<a id=\"more\"></a>\n<ul>\n<li>位运算符</li>\n</ul>\n<blockquote>\n<p>&amp;^ 按位清零，对于两个操作数来说，只要是右边位数为1，无论左边操作位数是0还是1，都会把左边位数清零，如果右边位数为0，那左边原来是什么就是什么</p>\n</blockquote>\n<p>1 &amp;^ 0 – 1</p>\n<p>1 &amp;^1 –0</p>\n<p>0 &amp;^1 –0</p>\n<p>0 &amp;^ 0 –0</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tReadable = <span class=\"number\">1</span> &lt;&lt; <span class=\"literal\">iota</span> <span class=\"comment\">// 1 &lt;&lt; 0 = 1</span></span><br><span class=\"line\">\tWritable\t\t\t<span class=\"comment\">// 1 &lt;&lt; 1 = 2</span></span><br><span class=\"line\">\tExecutable\t\t\t<span class=\"comment\">// 1 &lt;&lt; 2 = 4</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestBitClean</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\ta := <span class=\"number\">7</span> <span class=\"comment\">// 0111</span></span><br><span class=\"line\">\ta = a&amp;^ Readable</span><br><span class=\"line\">\tt.Log(a&amp;Readable == Readable, a&amp;Writable == Writable, a&amp;Executable == Executable)</span><br><span class=\"line\">\tt.Log(a &amp;^ Readable)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<ul>\n<li>Go 语言没有前置的 ++ – 如： ++1,–1</li>\n<li>用 == 比较数组</li>\n</ul>\n<ol>\n<li>相同维度数组且含有相同个数元素的数组才可以比较</li>\n<li>每个元都有相同的才相等<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestCompareArray</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\ta := [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//b := [...]int&#123;1, 2, 3, 4, 5&#125;</span></span><br><span class=\"line\">\tc := [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\td := [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//t.Log(a == b)</span></span><br><span class=\"line\">\tt.Log(a == c,a==d)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>","more":"<ul>\n<li>位运算符</li>\n</ul>\n<blockquote>\n<p>&amp;^ 按位清零，对于两个操作数来说，只要是右边位数为1，无论左边操作位数是0还是1，都会把左边位数清零，如果右边位数为0，那左边原来是什么就是什么</p>\n</blockquote>\n<p>1 &amp;^ 0 – 1</p>\n<p>1 &amp;^1 –0</p>\n<p>0 &amp;^1 –0</p>\n<p>0 &amp;^ 0 –0</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tReadable = <span class=\"number\">1</span> &lt;&lt; <span class=\"literal\">iota</span> <span class=\"comment\">// 1 &lt;&lt; 0 = 1</span></span><br><span class=\"line\">\tWritable\t\t\t<span class=\"comment\">// 1 &lt;&lt; 1 = 2</span></span><br><span class=\"line\">\tExecutable\t\t\t<span class=\"comment\">// 1 &lt;&lt; 2 = 4</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestBitClean</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\ta := <span class=\"number\">7</span> <span class=\"comment\">// 0111</span></span><br><span class=\"line\">\ta = a&amp;^ Readable</span><br><span class=\"line\">\tt.Log(a&amp;Readable == Readable, a&amp;Writable == Writable, a&amp;Executable == Executable)</span><br><span class=\"line\">\tt.Log(a &amp;^ Readable)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"go-条件和循环","date":"2020-06-17T10:01:33.541Z","comments":1,"_content":"\n**循环**\n\n* 只有一个 for 关键字\n\n```go\n// while循环\nfunc TestWhileLoop(t *testing.T) {\n\tn:=0\n\tfor n<5  {\n\t\tt.Log(n)\n\t\tn++\n\t}\n}\n```\n**条件**\n<!--more-->\n* if 条件\n\n1. condition 表达式必须布尔值\n2. 支持变量赋值：\n```\nif var declaration; condition{\n    \n}\n```\n例：\n\n```go\nfunc TestIf(t *testing.T) {\n\tif a:=1==1; a{\n\t\tt.Log(\"1==1\")\n\t}\n}\n```\n\n* switch条件\n\n1. 条件表达式不限制为常量或者整数\n2. 单个case中，可以出现多个结果选项，使用逗号分割\n3. 于C ，java等规则相反，Go语言不需要使用break来明确退出一个case\n4. 可以不设定switch之后的条件表达式，在这种情况下，整个switch结构与多个if...else...的逻辑作用等同\n\n```go\nfunc TestSwitchMultiCase(t *testing.T)  {\n\tfor i := 0; i < 5; i++ {\n\t\tswitch i {\n\t\tcase 0, 2:\n\t\t\tt.Log(\"Even\")\n\t\tcase 1, 3:\n\t\t\tt.Log(\"Odd\")\n\t\tdefault:\n\t\t\tt.Log(\"it is not 0-3\")\n\t\t}\n\t}\n}\n\nfunc TestSwitchCaseCondition(t *testing.T) {\n\tfor i := 0; i < 5; i++ {\n\t\tswitch {\n\t\tcase i%2 == 0:\n\t\t\tt.Log(\"Even\")\n\t\tcase i%2 == 1:\n\t\t\tt.Log(\"Odd\")\n\t\tdefault:\n\t\t\tt.Log(\"unknown\")\n\n\t\t}\n\t}\n}\n```","source":"_posts/go-条件和循环.md","raw":"---\ntitle: go-条件和循环\ndate: 2020年6月16日\ncomments: true\ncategories: go\ntags:\n---\n\n**循环**\n\n* 只有一个 for 关键字\n\n```go\n// while循环\nfunc TestWhileLoop(t *testing.T) {\n\tn:=0\n\tfor n<5  {\n\t\tt.Log(n)\n\t\tn++\n\t}\n}\n```\n**条件**\n<!--more-->\n* if 条件\n\n1. condition 表达式必须布尔值\n2. 支持变量赋值：\n```\nif var declaration; condition{\n    \n}\n```\n例：\n\n```go\nfunc TestIf(t *testing.T) {\n\tif a:=1==1; a{\n\t\tt.Log(\"1==1\")\n\t}\n}\n```\n\n* switch条件\n\n1. 条件表达式不限制为常量或者整数\n2. 单个case中，可以出现多个结果选项，使用逗号分割\n3. 于C ，java等规则相反，Go语言不需要使用break来明确退出一个case\n4. 可以不设定switch之后的条件表达式，在这种情况下，整个switch结构与多个if...else...的逻辑作用等同\n\n```go\nfunc TestSwitchMultiCase(t *testing.T)  {\n\tfor i := 0; i < 5; i++ {\n\t\tswitch i {\n\t\tcase 0, 2:\n\t\t\tt.Log(\"Even\")\n\t\tcase 1, 3:\n\t\t\tt.Log(\"Odd\")\n\t\tdefault:\n\t\t\tt.Log(\"it is not 0-3\")\n\t\t}\n\t}\n}\n\nfunc TestSwitchCaseCondition(t *testing.T) {\n\tfor i := 0; i < 5; i++ {\n\t\tswitch {\n\t\tcase i%2 == 0:\n\t\t\tt.Log(\"Even\")\n\t\tcase i%2 == 1:\n\t\t\tt.Log(\"Odd\")\n\t\tdefault:\n\t\t\tt.Log(\"unknown\")\n\n\t\t}\n\t}\n}\n```","slug":"go-条件和循环","published":1,"updated":"2020-06-17T10:01:33.541Z","layout":"post","photos":[],"link":"","_id":"ckblkjn6t000k0tpcka95fybo","content":"<p><strong>循环</strong></p>\n<ul>\n<li>只有一个 for 关键字</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// while循环</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestWhileLoop</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tn:=<span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> n&lt;<span class=\"number\">5</span>  &#123;</span><br><span class=\"line\">\t\tt.Log(n)</span><br><span class=\"line\">\t\tn++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>条件</strong></p>\n<a id=\"more\"></a>\n<ul>\n<li>if 条件</li>\n</ul>\n<ol>\n<li>condition 表达式必须布尔值</li>\n<li>支持变量赋值：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if var declaration; condition&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestIf</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> a:=<span class=\"number\">1</span>==<span class=\"number\">1</span>; a&#123;</span><br><span class=\"line\">\t\tt.Log(<span class=\"string\">\"1==1\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>switch条件</li>\n</ul>\n<ol>\n<li>条件表达式不限制为常量或者整数</li>\n<li>单个case中，可以出现多个结果选项，使用逗号分割</li>\n<li>于C ，java等规则相反，Go语言不需要使用break来明确退出一个case</li>\n<li>可以不设定switch之后的条件表达式，在这种情况下，整个switch结构与多个if…else…的逻辑作用等同</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestSwitchMultiCase</span><span class=\"params\">(t *testing.T)</span></span>  &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> i &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">0</span>, <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\tt.Log(<span class=\"string\">\"Even\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>, <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\tt.Log(<span class=\"string\">\"Odd\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\tt.Log(<span class=\"string\">\"it is not 0-3\"</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestSwitchCaseCondition</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> i%<span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t\tt.Log(<span class=\"string\">\"Even\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> i%<span class=\"number\">2</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\tt.Log(<span class=\"string\">\"Odd\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\tt.Log(<span class=\"string\">\"unknown\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><strong>循环</strong></p>\n<ul>\n<li>只有一个 for 关键字</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// while循环</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestWhileLoop</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tn:=<span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> n&lt;<span class=\"number\">5</span>  &#123;</span><br><span class=\"line\">\t\tt.Log(n)</span><br><span class=\"line\">\t\tn++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>条件</strong></p>","more":"<ul>\n<li>if 条件</li>\n</ul>\n<ol>\n<li>condition 表达式必须布尔值</li>\n<li>支持变量赋值：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if var declaration; condition&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>例：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestIf</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> a:=<span class=\"number\">1</span>==<span class=\"number\">1</span>; a&#123;</span><br><span class=\"line\">\t\tt.Log(<span class=\"string\">\"1==1\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>switch条件</li>\n</ul>\n<ol>\n<li>条件表达式不限制为常量或者整数</li>\n<li>单个case中，可以出现多个结果选项，使用逗号分割</li>\n<li>于C ，java等规则相反，Go语言不需要使用break来明确退出一个case</li>\n<li>可以不设定switch之后的条件表达式，在这种情况下，整个switch结构与多个if…else…的逻辑作用等同</li>\n</ol>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestSwitchMultiCase</span><span class=\"params\">(t *testing.T)</span></span>  &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> i &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">0</span>, <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\tt.Log(<span class=\"string\">\"Even\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>, <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\tt.Log(<span class=\"string\">\"Odd\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\tt.Log(<span class=\"string\">\"it is not 0-3\"</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestSwitchCaseCondition</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> i%<span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t\tt.Log(<span class=\"string\">\"Even\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> i%<span class=\"number\">2</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\tt.Log(<span class=\"string\">\"Odd\"</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\tt.Log(<span class=\"string\">\"unknown\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"生成微信小程序码","date":"2020-06-18T07:31:04.864Z","comments":1,"_content":"\n# 生成微信小程序码\n\n    通过查阅微信官方文档，得知获取微信小程序码有两个步骤：\n\n [wxacode.getUnlimited | 微信开放文档](https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html)\n\n<!--more-->\n\n## 获取 AccessToken\n\n```java\npublic Supplier<String> getAccessToken() {\n        return () -> {\n            String cacheAccess = redisTemplate.opsForValue().get(PLA_WX_ACCESS_PREFIX);\n            if (StringUtils.isEmpty(cacheAccess)) {\n                JSONObject result = WechatHttpsRequest.httpsRequest(ACCESS_TOKEN_URL, \"POST\", null);\n                BizErrors.GET_WX_ACCESS_ERROR.ifNull(result.get(\"access_token\"));\n                String accessToken = String.valueOf(result.get(\"access_token\"));\n                redisTemplate.opsForValue().set(PLA_WX_ACCESS_PREFIX, accessToken, EXPIRES_IN, TimeUnit.SECONDS);\n                return accessToken;\n            }else{\n                return cacheAccess;\n            }\n        };\n    }\n```\n\n## 获取小程序码\n\n```java\n/**\n     * @param requestUrl\n     * @param requestBody\n     * @return BufferedImage\n     * @Author: Hou_fx\n     * @Date: 2019/11/20 下午3:48\n     * @Description: 生成微信小程序二维码\n     */\n    public static BufferedImage createQRCode(String requestUrl, String requestBody) throws IOException {\n        HttpPost httpPost = new HttpPost(requestUrl);// 创建httpPost\n        try {\n            StringEntity stringEntity = new StringEntity(requestBody, \"UTF-8\");\n            stringEntity.setContentType(\"application/json;charset=UTF-8\");\n            httpPost.setEntity(stringEntity);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return sendHttpPost(httpPost);\n    }\n\n    private static BufferedImage sendHttpPost(HttpPost httpPost) throws IOException {\n        BufferedImage responseContent;\n        try (CloseableHttpClient httpClient = HttpClients.createDefault();\n             CloseableHttpResponse response = httpClient.execute(httpPost)\n        ) {\n            HttpEntity entity = response.getEntity();\n            httpPost.setConfig(requestConfig);\n            String resultContent = \"json\";\n            HeaderElement[] elements = entity.getContentType().getElements();\n            for (HeaderElement ele : Arrays.asList(elements)) {\n                if (String.valueOf(ele).contains(resultContent)) {\n                    log.error(EntityUtils.toString(entity, \"utf-8\"));\n                    JSONObject res = JSONObject.parseObject(EntityUtils.toString(entity, \"utf-8\"));\n                    throw new BizException(res.getString(\"errCode\"), res.getString(\"errMsg\"));\n                }\n            }\n            responseContent = ImageIO.read(new ByteArrayInputStream(EntityUtils.toByteArray(entity)));\n        }\n        return responseContent;\n    }\n```\n\n    返回的是 BufferedImage ,可根据需求转换其他类型\n\n## 效果图\n\n![UTOOLS1592465384263.png](https://user-gold-cdn.xitu.io/2020/6/18/172c655634583dcc?w=1575&h=822&f=png&s=189638)","source":"_posts/生成微信小程序码.md","raw":"---\ntitle: 生成微信小程序码\ndate: 2020年6月18日\ncomments: true\ncategories: java\ntags:\n\n- 微信开发\n\n---\n\n# 生成微信小程序码\n\n    通过查阅微信官方文档，得知获取微信小程序码有两个步骤：\n\n [wxacode.getUnlimited | 微信开放文档](https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html)\n\n<!--more-->\n\n## 获取 AccessToken\n\n```java\npublic Supplier<String> getAccessToken() {\n        return () -> {\n            String cacheAccess = redisTemplate.opsForValue().get(PLA_WX_ACCESS_PREFIX);\n            if (StringUtils.isEmpty(cacheAccess)) {\n                JSONObject result = WechatHttpsRequest.httpsRequest(ACCESS_TOKEN_URL, \"POST\", null);\n                BizErrors.GET_WX_ACCESS_ERROR.ifNull(result.get(\"access_token\"));\n                String accessToken = String.valueOf(result.get(\"access_token\"));\n                redisTemplate.opsForValue().set(PLA_WX_ACCESS_PREFIX, accessToken, EXPIRES_IN, TimeUnit.SECONDS);\n                return accessToken;\n            }else{\n                return cacheAccess;\n            }\n        };\n    }\n```\n\n## 获取小程序码\n\n```java\n/**\n     * @param requestUrl\n     * @param requestBody\n     * @return BufferedImage\n     * @Author: Hou_fx\n     * @Date: 2019/11/20 下午3:48\n     * @Description: 生成微信小程序二维码\n     */\n    public static BufferedImage createQRCode(String requestUrl, String requestBody) throws IOException {\n        HttpPost httpPost = new HttpPost(requestUrl);// 创建httpPost\n        try {\n            StringEntity stringEntity = new StringEntity(requestBody, \"UTF-8\");\n            stringEntity.setContentType(\"application/json;charset=UTF-8\");\n            httpPost.setEntity(stringEntity);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return sendHttpPost(httpPost);\n    }\n\n    private static BufferedImage sendHttpPost(HttpPost httpPost) throws IOException {\n        BufferedImage responseContent;\n        try (CloseableHttpClient httpClient = HttpClients.createDefault();\n             CloseableHttpResponse response = httpClient.execute(httpPost)\n        ) {\n            HttpEntity entity = response.getEntity();\n            httpPost.setConfig(requestConfig);\n            String resultContent = \"json\";\n            HeaderElement[] elements = entity.getContentType().getElements();\n            for (HeaderElement ele : Arrays.asList(elements)) {\n                if (String.valueOf(ele).contains(resultContent)) {\n                    log.error(EntityUtils.toString(entity, \"utf-8\"));\n                    JSONObject res = JSONObject.parseObject(EntityUtils.toString(entity, \"utf-8\"));\n                    throw new BizException(res.getString(\"errCode\"), res.getString(\"errMsg\"));\n                }\n            }\n            responseContent = ImageIO.read(new ByteArrayInputStream(EntityUtils.toByteArray(entity)));\n        }\n        return responseContent;\n    }\n```\n\n    返回的是 BufferedImage ,可根据需求转换其他类型\n\n## 效果图\n\n![UTOOLS1592465384263.png](https://user-gold-cdn.xitu.io/2020/6/18/172c655634583dcc?w=1575&h=822&f=png&s=189638)","slug":"生成微信小程序码","published":1,"updated":"2020-06-18T07:31:04.864Z","layout":"post","photos":[],"link":"","_id":"ckblkjn7c000t0tpcjlkorufk","content":"<h1 id=\"生成微信小程序码\"><a href=\"#生成微信小程序码\" class=\"headerlink\" title=\"生成微信小程序码\"></a>生成微信小程序码</h1><pre><code>通过查阅微信官方文档，得知获取微信小程序码有两个步骤：</code></pre><p> <a href=\"https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html\" target=\"_blank\" rel=\"noopener\">wxacode.getUnlimited | 微信开放文档</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"获取-AccessToken\"><a href=\"#获取-AccessToken\" class=\"headerlink\" title=\"获取 AccessToken\"></a>获取 AccessToken</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Supplier&lt;String&gt; <span class=\"title\">getAccessToken</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> () -&gt; &#123;</span><br><span class=\"line\">            String cacheAccess = redisTemplate.opsForValue().get(PLA_WX_ACCESS_PREFIX);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.isEmpty(cacheAccess)) &#123;</span><br><span class=\"line\">                JSONObject result = WechatHttpsRequest.httpsRequest(ACCESS_TOKEN_URL, <span class=\"string\">\"POST\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                BizErrors.GET_WX_ACCESS_ERROR.ifNull(result.get(<span class=\"string\">\"access_token\"</span>));</span><br><span class=\"line\">                String accessToken = String.valueOf(result.get(<span class=\"string\">\"access_token\"</span>));</span><br><span class=\"line\">                redisTemplate.opsForValue().set(PLA_WX_ACCESS_PREFIX, accessToken, EXPIRES_IN, TimeUnit.SECONDS);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> accessToken;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> cacheAccess;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取小程序码\"><a href=\"#获取小程序码\" class=\"headerlink\" title=\"获取小程序码\"></a>获取小程序码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> requestUrl</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> requestBody</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> BufferedImage</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Author</span>: Hou_fx</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Date</span>: 2019/11/20 下午3:48</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Description</span>: 生成微信小程序二维码</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BufferedImage <span class=\"title\">createQRCode</span><span class=\"params\">(String requestUrl, String requestBody)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        HttpPost httpPost = <span class=\"keyword\">new</span> HttpPost(requestUrl);<span class=\"comment\">// 创建httpPost</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            StringEntity stringEntity = <span class=\"keyword\">new</span> StringEntity(requestBody, <span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">            stringEntity.setContentType(<span class=\"string\">\"application/json;charset=UTF-8\"</span>);</span><br><span class=\"line\">            httpPost.setEntity(stringEntity);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sendHttpPost(httpPost);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> BufferedImage <span class=\"title\">sendHttpPost</span><span class=\"params\">(HttpPost httpPost)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        BufferedImage responseContent;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class=\"line\">             CloseableHttpResponse response = httpClient.execute(httpPost)</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            HttpEntity entity = response.getEntity();</span><br><span class=\"line\">            httpPost.setConfig(requestConfig);</span><br><span class=\"line\">            String resultContent = <span class=\"string\">\"json\"</span>;</span><br><span class=\"line\">            HeaderElement[] elements = entity.getContentType().getElements();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (HeaderElement ele : Arrays.asList(elements)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (String.valueOf(ele).contains(resultContent)) &#123;</span><br><span class=\"line\">                    log.error(EntityUtils.toString(entity, <span class=\"string\">\"utf-8\"</span>));</span><br><span class=\"line\">                    JSONObject res = JSONObject.parseObject(EntityUtils.toString(entity, <span class=\"string\">\"utf-8\"</span>));</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BizException(res.getString(<span class=\"string\">\"errCode\"</span>), res.getString(<span class=\"string\">\"errMsg\"</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            responseContent = ImageIO.read(<span class=\"keyword\">new</span> ByteArrayInputStream(EntityUtils.toByteArray(entity)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> responseContent;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<pre><code>返回的是 BufferedImage ,可根据需求转换其他类型</code></pre><h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"https://user-gold-cdn.xitu.io/2020/6/18/172c655634583dcc?w=1575&h=822&f=png&s=189638\" alt=\"UTOOLS1592465384263.png\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"生成微信小程序码\"><a href=\"#生成微信小程序码\" class=\"headerlink\" title=\"生成微信小程序码\"></a>生成微信小程序码</h1><pre><code>通过查阅微信官方文档，得知获取微信小程序码有两个步骤：</code></pre><p> <a href=\"https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html\" target=\"_blank\" rel=\"noopener\">wxacode.getUnlimited | 微信开放文档</a></p>","more":"<h2 id=\"获取-AccessToken\"><a href=\"#获取-AccessToken\" class=\"headerlink\" title=\"获取 AccessToken\"></a>获取 AccessToken</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Supplier&lt;String&gt; <span class=\"title\">getAccessToken</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> () -&gt; &#123;</span><br><span class=\"line\">            String cacheAccess = redisTemplate.opsForValue().get(PLA_WX_ACCESS_PREFIX);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (StringUtils.isEmpty(cacheAccess)) &#123;</span><br><span class=\"line\">                JSONObject result = WechatHttpsRequest.httpsRequest(ACCESS_TOKEN_URL, <span class=\"string\">\"POST\"</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                BizErrors.GET_WX_ACCESS_ERROR.ifNull(result.get(<span class=\"string\">\"access_token\"</span>));</span><br><span class=\"line\">                String accessToken = String.valueOf(result.get(<span class=\"string\">\"access_token\"</span>));</span><br><span class=\"line\">                redisTemplate.opsForValue().set(PLA_WX_ACCESS_PREFIX, accessToken, EXPIRES_IN, TimeUnit.SECONDS);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> accessToken;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> cacheAccess;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取小程序码\"><a href=\"#获取小程序码\" class=\"headerlink\" title=\"获取小程序码\"></a>获取小程序码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> requestUrl</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> requestBody</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> BufferedImage</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Author</span>: Hou_fx</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Date</span>: 2019/11/20 下午3:48</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Description</span>: 生成微信小程序二维码</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BufferedImage <span class=\"title\">createQRCode</span><span class=\"params\">(String requestUrl, String requestBody)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        HttpPost httpPost = <span class=\"keyword\">new</span> HttpPost(requestUrl);<span class=\"comment\">// 创建httpPost</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            StringEntity stringEntity = <span class=\"keyword\">new</span> StringEntity(requestBody, <span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">            stringEntity.setContentType(<span class=\"string\">\"application/json;charset=UTF-8\"</span>);</span><br><span class=\"line\">            httpPost.setEntity(stringEntity);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sendHttpPost(httpPost);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> BufferedImage <span class=\"title\">sendHttpPost</span><span class=\"params\">(HttpPost httpPost)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        BufferedImage responseContent;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> (CloseableHttpClient httpClient = HttpClients.createDefault();</span><br><span class=\"line\">             CloseableHttpResponse response = httpClient.execute(httpPost)</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            HttpEntity entity = response.getEntity();</span><br><span class=\"line\">            httpPost.setConfig(requestConfig);</span><br><span class=\"line\">            String resultContent = <span class=\"string\">\"json\"</span>;</span><br><span class=\"line\">            HeaderElement[] elements = entity.getContentType().getElements();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (HeaderElement ele : Arrays.asList(elements)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (String.valueOf(ele).contains(resultContent)) &#123;</span><br><span class=\"line\">                    log.error(EntityUtils.toString(entity, <span class=\"string\">\"utf-8\"</span>));</span><br><span class=\"line\">                    JSONObject res = JSONObject.parseObject(EntityUtils.toString(entity, <span class=\"string\">\"utf-8\"</span>));</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BizException(res.getString(<span class=\"string\">\"errCode\"</span>), res.getString(<span class=\"string\">\"errMsg\"</span>));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            responseContent = ImageIO.read(<span class=\"keyword\">new</span> ByteArrayInputStream(EntityUtils.toByteArray(entity)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> responseContent;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<pre><code>返回的是 BufferedImage ,可根据需求转换其他类型</code></pre><h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"https://user-gold-cdn.xitu.io/2020/6/18/172c655634583dcc?w=1575&h=822&f=png&s=189638\" alt=\"UTOOLS1592465384263.png\"></p>"},{"title":"(转)正则表达式全集","date":"2020-06-18T06:10:32.806Z","comments":1,"_content":"\n[转自：正则表达式手册](https://tool.oschina.net/uploads/apidocs/jquery/regexp.html)\n\n<!--more-->\n\n| 字符           | 描述                                                                                                                                                                                                                             |\n| ------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| \\            | 将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“`n`”匹配字符“`n`”。“`\\n`”匹配一个换行符。串行“`\\\\`”匹配“`\\`”而“`\\(`”则匹配“`(`”。                                                                                                                      |\n| ^            | 匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“`\\n`”或“`\\r`”之后的位置。                                                                                                                                                                 |\n| $            | 匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“`\\n`”或“`\\r`”之前的位置。                                                                                                                                                                 |\n| *            | 匹配前面的子表达式零次或多次。例如，zo*能匹配“`z`”以及“`zoo`”。*等价于{0,}。                                                                                                                                                                               |\n| +            | 匹配前面的子表达式一次或多次。例如，“`zo+`”能匹配“`zo`”以及“`zoo`”，但不能匹配“`z`”。+等价于{1,}。                                                                                                                                                               |\n| ?            | 匹配前面的子表达式零次或一次。例如，“`do(es)?`”可以匹配“`does`”或“`does`”中的“`do`”。?等价于{0,1}。                                                                                                                                                          |\n| {n}          | n是一个非负整数。匹配确定的n次。例如，“`o{2}`”不能匹配“`Bob`”中的“`o`”，但是能匹配“`food`”中的两个o。                                                                                                                                                             |\n| {n,}         | n是一个非负整数。至少匹配n次。例如，“`o{2,}`”不能匹配“`Bob`”中的“`o`”，但能匹配“`foooood`”中的所有o。“`o{1,}`”等价于“`o+`”。“`o{0,}`”则等价于“`o*`”。                                                                                                                    |\n| {n,m}        | m和n均为非负整数，其中n<=m。最少匹配n次且最多匹配m次。例如，“`o{1,3}`”将匹配“`fooooood`”中的前三个o。“`o{0,1}`”等价于“`o?`”。请注意在逗号和两个数之间不能有空格。                                                                                                                       |\n| ?            | 当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“`oooo`”，“`o+?`”将匹配单个“`o`”，而“`o+`”将匹配所有“`o`”。                                                                          |\n| .            | 匹配除“`\\``n`”之外的任何单个字符。要匹配包括“`\\``n`”在内的任何字符，请使用像“`(.\\|\\n)`”的模式。                                                                                                                                                                  |\n| (pattern)    | 匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“`\\(`”或“`\\)`”。                                                                                                               |\n| (?:pattern)  | 匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“`(\\|)`”来组合一个模式的各个部分是很有用。例如“`industr(?:y\\|ies)`”就是一个比“`industry\\|industries`”更简略的表达式。                                                                                        |\n| (?=pattern)  | 正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“`Windows(?=95\\|98\\|NT\\|2000)`”能匹配“`Windows2000`”中的“`Windows`”，但不能匹配“`Windows3.1`”中的“`Windows`”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。 |\n| (?!pattern)  | 正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“`Windows(?!95\\|98\\|NT\\|2000)`”能匹配“`Windows3.1`”中的“`Windows`”，但不能匹配“`Windows2000`”中的“`Windows`”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始  |\n| (?<=pattern) | 反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“`(?<=95\\|98\\|NT\\|2000)Windows`”能匹配“`2000Windows`”中的“`Windows`”，但不能匹配“`3.1Windows`”中的“`Windows`”。                                                                                                   |\n| (?<!pattern) | 反向否定预查，与正向否定预查类拟，只是方向相反。例如“`(?<!95\\|98\\|NT\\|2000)Windows`”能匹配“`3.1Windows`”中的“`Windows`”，但不能匹配“`2000Windows`”中的“`Windows`”。                                                                                                    |\n| x\\|y         | 匹配x或y。例如，“`z\\|food`”能匹配“`z`”或“`food`”。“`(z\\|f)ood`”则匹配“`zood`”或“`food`”。                                                                                                                                                       |\n| [xyz]        | 字符集合。匹配所包含的任意一个字符。例如，“`[abc]`”可以匹配“`plain`”中的“`a`”。                                                                                                                                                                            |\n| [^xyz]       | 负值字符集合。匹配未包含的任意字符。例如，“`[^abc]`”可以匹配“`plain`”中的“`p`”。                                                                                                                                                                           |\n| [a-z]        | 字符范围。匹配指定范围内的任意字符。例如，“`[a-z]`”可以匹配“`a`”到“`z`”范围内的任意小写字母字符。                                                                                                                                                                     |\n| [^a-z]       | 负值字符范围。匹配任何不在指定范围内的任意字符。例如，“`[^a-z]`”可以匹配任何不在“`a`”到“`z`”范围内的任意字符。                                                                                                                                                              |\n| \\b           | 匹配一个单词边界，也就是指单词和空格间的位置。例如，“`er\\b`”可以匹配“`never`”中的“`er`”，但不能匹配“`verb`”中的“`er`”。                                                                                                                                                 |\n| \\B           | 匹配非单词边界。“`er\\B`”能匹配“`verb`”中的“`er`”，但不能匹配“`never`”中的“`er`”。                                                                                                                                                                    |\n| \\cx          | 匹配由x指明的控制字符。例如，\\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“`c`”字符。                                                                                                                                                       |\n| \\d           | 匹配一个数字字符。等价于[0-9]。                                                                                                                                                                                                             |\n| \\D           | 匹配一个非数字字符。等价于[^0-9]。                                                                                                                                                                                                           |\n| \\f           | 匹配一个换页符。等价于\\x0c和\\cL。                                                                                                                                                                                                           |\n| \\n           | 匹配一个换行符。等价于\\x0a和\\cJ。                                                                                                                                                                                                           |\n| \\r           | 匹配一个回车符。等价于\\x0d和\\cM。                                                                                                                                                                                                           |\n| \\s           | 匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \\f\\n\\r\\t\\v]。                                                                                                                                                                                      |\n| \\S           | 匹配任何非空白字符。等价于[^ \\f\\n\\r\\t\\v]。                                                                                                                                                                                                   |\n| \\t           | 匹配一个制表符。等价于\\x09和\\cI。                                                                                                                                                                                                           |\n| \\v           | 匹配一个垂直制表符。等价于\\x0b和\\cK。                                                                                                                                                                                                         |\n| \\w           | 匹配包括下划线的任何单词字符。等价于“`[A-Za-z0-9_]`”。                                                                                                                                                                                            |\n| \\W           | 匹配任何非单词字符。等价于“`[^A-Za-z0-9_]`”。                                                                                                                                                                                                |\n| \\xn          | 匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“`\\x41`”匹配“`A`”。“`\\x041`”则等价于“`\\x04&1`”。正则表达式中可以使用ASCII编码。.                                                                                                                              |\n| \\num         | 匹配num，其中num是一个正整数。对所获取的匹配的引用。例如，“`(.)\\1`”匹配两个连续的相同字符。                                                                                                                                                                          |\n| \\n           | 标识一个八进制转义值或一个向后引用。如果\\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值。                                                                                                                                                     |\n| \\nm          | 标识一个八进制转义值或一个向后引用。如果\\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\\nm将匹配八进制转义值nm。                                                                                                    |\n| \\nml         | 如果n为八进制数字（0-3），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。                                                                                                                                                                                  |\n| \\un          | 匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\\u00A9匹配版权符号（©）。                                                                                                                                                                            |\n\n## 常用正则表达式\n\n|                 |                                                                                                                                                                              |\n| --------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 用户名             | /^[a-z0-9_-]{3,16}$/                                                                                                                                                         |\n| 密码              | /^[a-z0-9_-]{6,18}$/                                                                                                                                                         |\n| 十六进制值           | /^#?([a-f0-9]{6}\\|[a-f0-9]{3})$/                                                                                                                                             |\n| 电子邮箱            | /^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2,6})$/<br>/^[a-z\\d]+(\\.[a-z\\d]+)*@([\\da-z](-[\\da-z])?)+(\\.{1,2}[a-z]+)+$/                                                         |\n| URL             | /^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$/                                                                                                             |\n| IP 地址           | /((2[0-4]\\d\\|25[0-5]\\|[01]?\\d\\d?)\\.){3}(2[0-4]\\d\\|25[0-5]\\|[01]?\\d\\d?)/<br>/^(?:(?:25[0-5]\\|2[0-4][0-9]\\|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]\\|2[0-4][0-9]\\|[01]?[0-9][0-9]?)$/ |\n| HTML 标签         | /^<([a-z]+)([^<]+)*(?:>(.*)<\\/\\1>\\|\\s+\\/>)$/                                                                                                                                 |\n| 删除代码\\\\注释        | (?<!http:\\|\\S)//.*$                                                                                                                                                          |\n| Unicode编码中的汉字范围 | /^[\\u2E80-\\u9FFF]+$/                                                                                                                                                         |\n","source":"_posts/常用正则表达式.md","raw":"---\ntitle: (转)正则表达式全集\ndate: 2020年6月17日\ncomments: true\ncategories: \ntags:\n- 正则表达式\n---\n\n[转自：正则表达式手册](https://tool.oschina.net/uploads/apidocs/jquery/regexp.html)\n\n<!--more-->\n\n| 字符           | 描述                                                                                                                                                                                                                             |\n| ------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| \\            | 将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“`n`”匹配字符“`n`”。“`\\n`”匹配一个换行符。串行“`\\\\`”匹配“`\\`”而“`\\(`”则匹配“`(`”。                                                                                                                      |\n| ^            | 匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“`\\n`”或“`\\r`”之后的位置。                                                                                                                                                                 |\n| $            | 匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“`\\n`”或“`\\r`”之前的位置。                                                                                                                                                                 |\n| *            | 匹配前面的子表达式零次或多次。例如，zo*能匹配“`z`”以及“`zoo`”。*等价于{0,}。                                                                                                                                                                               |\n| +            | 匹配前面的子表达式一次或多次。例如，“`zo+`”能匹配“`zo`”以及“`zoo`”，但不能匹配“`z`”。+等价于{1,}。                                                                                                                                                               |\n| ?            | 匹配前面的子表达式零次或一次。例如，“`do(es)?`”可以匹配“`does`”或“`does`”中的“`do`”。?等价于{0,1}。                                                                                                                                                          |\n| {n}          | n是一个非负整数。匹配确定的n次。例如，“`o{2}`”不能匹配“`Bob`”中的“`o`”，但是能匹配“`food`”中的两个o。                                                                                                                                                             |\n| {n,}         | n是一个非负整数。至少匹配n次。例如，“`o{2,}`”不能匹配“`Bob`”中的“`o`”，但能匹配“`foooood`”中的所有o。“`o{1,}`”等价于“`o+`”。“`o{0,}`”则等价于“`o*`”。                                                                                                                    |\n| {n,m}        | m和n均为非负整数，其中n<=m。最少匹配n次且最多匹配m次。例如，“`o{1,3}`”将匹配“`fooooood`”中的前三个o。“`o{0,1}`”等价于“`o?`”。请注意在逗号和两个数之间不能有空格。                                                                                                                       |\n| ?            | 当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“`oooo`”，“`o+?`”将匹配单个“`o`”，而“`o+`”将匹配所有“`o`”。                                                                          |\n| .            | 匹配除“`\\``n`”之外的任何单个字符。要匹配包括“`\\``n`”在内的任何字符，请使用像“`(.\\|\\n)`”的模式。                                                                                                                                                                  |\n| (pattern)    | 匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“`\\(`”或“`\\)`”。                                                                                                               |\n| (?:pattern)  | 匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“`(\\|)`”来组合一个模式的各个部分是很有用。例如“`industr(?:y\\|ies)`”就是一个比“`industry\\|industries`”更简略的表达式。                                                                                        |\n| (?=pattern)  | 正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“`Windows(?=95\\|98\\|NT\\|2000)`”能匹配“`Windows2000`”中的“`Windows`”，但不能匹配“`Windows3.1`”中的“`Windows`”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。 |\n| (?!pattern)  | 正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“`Windows(?!95\\|98\\|NT\\|2000)`”能匹配“`Windows3.1`”中的“`Windows`”，但不能匹配“`Windows2000`”中的“`Windows`”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始  |\n| (?<=pattern) | 反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“`(?<=95\\|98\\|NT\\|2000)Windows`”能匹配“`2000Windows`”中的“`Windows`”，但不能匹配“`3.1Windows`”中的“`Windows`”。                                                                                                   |\n| (?<!pattern) | 反向否定预查，与正向否定预查类拟，只是方向相反。例如“`(?<!95\\|98\\|NT\\|2000)Windows`”能匹配“`3.1Windows`”中的“`Windows`”，但不能匹配“`2000Windows`”中的“`Windows`”。                                                                                                    |\n| x\\|y         | 匹配x或y。例如，“`z\\|food`”能匹配“`z`”或“`food`”。“`(z\\|f)ood`”则匹配“`zood`”或“`food`”。                                                                                                                                                       |\n| [xyz]        | 字符集合。匹配所包含的任意一个字符。例如，“`[abc]`”可以匹配“`plain`”中的“`a`”。                                                                                                                                                                            |\n| [^xyz]       | 负值字符集合。匹配未包含的任意字符。例如，“`[^abc]`”可以匹配“`plain`”中的“`p`”。                                                                                                                                                                           |\n| [a-z]        | 字符范围。匹配指定范围内的任意字符。例如，“`[a-z]`”可以匹配“`a`”到“`z`”范围内的任意小写字母字符。                                                                                                                                                                     |\n| [^a-z]       | 负值字符范围。匹配任何不在指定范围内的任意字符。例如，“`[^a-z]`”可以匹配任何不在“`a`”到“`z`”范围内的任意字符。                                                                                                                                                              |\n| \\b           | 匹配一个单词边界，也就是指单词和空格间的位置。例如，“`er\\b`”可以匹配“`never`”中的“`er`”，但不能匹配“`verb`”中的“`er`”。                                                                                                                                                 |\n| \\B           | 匹配非单词边界。“`er\\B`”能匹配“`verb`”中的“`er`”，但不能匹配“`never`”中的“`er`”。                                                                                                                                                                    |\n| \\cx          | 匹配由x指明的控制字符。例如，\\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“`c`”字符。                                                                                                                                                       |\n| \\d           | 匹配一个数字字符。等价于[0-9]。                                                                                                                                                                                                             |\n| \\D           | 匹配一个非数字字符。等价于[^0-9]。                                                                                                                                                                                                           |\n| \\f           | 匹配一个换页符。等价于\\x0c和\\cL。                                                                                                                                                                                                           |\n| \\n           | 匹配一个换行符。等价于\\x0a和\\cJ。                                                                                                                                                                                                           |\n| \\r           | 匹配一个回车符。等价于\\x0d和\\cM。                                                                                                                                                                                                           |\n| \\s           | 匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \\f\\n\\r\\t\\v]。                                                                                                                                                                                      |\n| \\S           | 匹配任何非空白字符。等价于[^ \\f\\n\\r\\t\\v]。                                                                                                                                                                                                   |\n| \\t           | 匹配一个制表符。等价于\\x09和\\cI。                                                                                                                                                                                                           |\n| \\v           | 匹配一个垂直制表符。等价于\\x0b和\\cK。                                                                                                                                                                                                         |\n| \\w           | 匹配包括下划线的任何单词字符。等价于“`[A-Za-z0-9_]`”。                                                                                                                                                                                            |\n| \\W           | 匹配任何非单词字符。等价于“`[^A-Za-z0-9_]`”。                                                                                                                                                                                                |\n| \\xn          | 匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“`\\x41`”匹配“`A`”。“`\\x041`”则等价于“`\\x04&1`”。正则表达式中可以使用ASCII编码。.                                                                                                                              |\n| \\num         | 匹配num，其中num是一个正整数。对所获取的匹配的引用。例如，“`(.)\\1`”匹配两个连续的相同字符。                                                                                                                                                                          |\n| \\n           | 标识一个八进制转义值或一个向后引用。如果\\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值。                                                                                                                                                     |\n| \\nm          | 标识一个八进制转义值或一个向后引用。如果\\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\\nm将匹配八进制转义值nm。                                                                                                    |\n| \\nml         | 如果n为八进制数字（0-3），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。                                                                                                                                                                                  |\n| \\un          | 匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\\u00A9匹配版权符号（©）。                                                                                                                                                                            |\n\n## 常用正则表达式\n\n|                 |                                                                                                                                                                              |\n| --------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 用户名             | /^[a-z0-9_-]{3,16}$/                                                                                                                                                         |\n| 密码              | /^[a-z0-9_-]{6,18}$/                                                                                                                                                         |\n| 十六进制值           | /^#?([a-f0-9]{6}\\|[a-f0-9]{3})$/                                                                                                                                             |\n| 电子邮箱            | /^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]{2,6})$/<br>/^[a-z\\d]+(\\.[a-z\\d]+)*@([\\da-z](-[\\da-z])?)+(\\.{1,2}[a-z]+)+$/                                                         |\n| URL             | /^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$/                                                                                                             |\n| IP 地址           | /((2[0-4]\\d\\|25[0-5]\\|[01]?\\d\\d?)\\.){3}(2[0-4]\\d\\|25[0-5]\\|[01]?\\d\\d?)/<br>/^(?:(?:25[0-5]\\|2[0-4][0-9]\\|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]\\|2[0-4][0-9]\\|[01]?[0-9][0-9]?)$/ |\n| HTML 标签         | /^<([a-z]+)([^<]+)*(?:>(.*)<\\/\\1>\\|\\s+\\/>)$/                                                                                                                                 |\n| 删除代码\\\\注释        | (?<!http:\\|\\S)//.*$                                                                                                                                                          |\n| Unicode编码中的汉字范围 | /^[\\u2E80-\\u9FFF]+$/                                                                                                                                                         |\n","slug":"常用正则表达式","published":1,"updated":"2020-06-18T06:10:32.808Z","layout":"post","photos":[],"link":"","_id":"ckblkjn7d000u0tpct0nc78yj","content":"<p><a href=\"https://tool.oschina.net/uploads/apidocs/jquery/regexp.html\" target=\"_blank\" rel=\"noopener\">转自：正则表达式手册</a></p>\n<a id=\"more\"></a>\n\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\</td>\n<td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“<code>n</code>”匹配字符“<code>n</code>”。“<code>\\n</code>”匹配一个换行符。串行“<code>\\\\</code>”匹配“<code>\\</code>”而“<code>\\(</code>”则匹配“<code>(</code>”。</td>\n</tr>\n<tr>\n<td>^</td>\n<td>匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“<code>\\n</code>”或“<code>\\r</code>”之后的位置。</td>\n</tr>\n<tr>\n<td>$</td>\n<td>匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“<code>\\n</code>”或“<code>\\r</code>”之前的位置。</td>\n</tr>\n<tr>\n<td>*</td>\n<td>匹配前面的子表达式零次或多次。例如，zo<em>能匹配“<code>z</code>”以及“<code>zoo</code>”。</em>等价于{0,}。</td>\n</tr>\n<tr>\n<td>+</td>\n<td>匹配前面的子表达式一次或多次。例如，“<code>zo+</code>”能匹配“<code>zo</code>”以及“<code>zoo</code>”，但不能匹配“<code>z</code>”。+等价于{1,}。</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配前面的子表达式零次或一次。例如，“<code>do(es)?</code>”可以匹配“<code>does</code>”或“<code>does</code>”中的“<code>do</code>”。?等价于{0,1}。</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>n是一个非负整数。匹配确定的n次。例如，“<code>o{2}</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但是能匹配“<code>food</code>”中的两个o。</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>n是一个非负整数。至少匹配n次。例如，“<code>o{2,}</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但能匹配“<code>foooood</code>”中的所有o。“<code>o{1,}</code>”等价于“<code>o+</code>”。“<code>o{0,}</code>”则等价于“<code>o*</code>”。</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。例如，“<code>o{1,3}</code>”将匹配“<code>fooooood</code>”中的前三个o。“<code>o{0,1}</code>”等价于“<code>o?</code>”。请注意在逗号和两个数之间不能有空格。</td>\n</tr>\n<tr>\n<td>?</td>\n<td>当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“<code>oooo</code>”，“<code>o+?</code>”将匹配单个“<code>o</code>”，而“<code>o+</code>”将匹配所有“<code>o</code>”。</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配除“<code>\\``n</code>”之外的任何单个字符。要匹配包括“<code>\\``n</code>”在内的任何字符，请使用像“<code>(.|\\n)</code>”的模式。</td>\n</tr>\n<tr>\n<td>(pattern)</td>\n<td>匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“<code>\\(</code>”或“<code>\\)</code>”。</td>\n</tr>\n<tr>\n<td>(?:pattern)</td>\n<td>匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“<code>(|)</code>”来组合一个模式的各个部分是很有用。例如“<code>industr(?:y|ies)</code>”就是一个比“<code>industry|industries</code>”更简略的表达式。</td>\n</tr>\n<tr>\n<td>(?=pattern)</td>\n<td>正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“<code>Windows(?=95|98|NT|2000)</code>”能匹配“<code>Windows2000</code>”中的“<code>Windows</code>”，但不能匹配“<code>Windows3.1</code>”中的“<code>Windows</code>”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>\n</tr>\n<tr>\n<td>(?!pattern)</td>\n<td>正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“<code>Windows(?!95|98|NT|2000)</code>”能匹配“<code>Windows3.1</code>”中的“<code>Windows</code>”，但不能匹配“<code>Windows2000</code>”中的“<code>Windows</code>”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始</td>\n</tr>\n<tr>\n<td>(?&lt;=pattern)</td>\n<td>反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“<code>(?&lt;=95|98|NT|2000)Windows</code>”能匹配“<code>2000Windows</code>”中的“<code>Windows</code>”，但不能匹配“<code>3.1Windows</code>”中的“<code>Windows</code>”。</td>\n</tr>\n<tr>\n<td>(?&lt;!pattern)</td>\n<td>反向否定预查，与正向否定预查类拟，只是方向相反。例如“<code>(?&lt;!95|98|NT|2000)Windows</code>”能匹配“<code>3.1Windows</code>”中的“<code>Windows</code>”，但不能匹配“<code>2000Windows</code>”中的“<code>Windows</code>”。</td>\n</tr>\n<tr>\n<td>x|y</td>\n<td>匹配x或y。例如，“<code>z|food</code>”能匹配“<code>z</code>”或“<code>food</code>”。“<code>(z|f)ood</code>”则匹配“<code>zood</code>”或“<code>food</code>”。</td>\n</tr>\n<tr>\n<td>[xyz]</td>\n<td>字符集合。匹配所包含的任意一个字符。例如，“<code>[abc]</code>”可以匹配“<code>plain</code>”中的“<code>a</code>”。</td>\n</tr>\n<tr>\n<td>[^xyz]</td>\n<td>负值字符集合。匹配未包含的任意字符。例如，“<code>[^abc]</code>”可以匹配“<code>plain</code>”中的“<code>p</code>”。</td>\n</tr>\n<tr>\n<td>[a-z]</td>\n<td>字符范围。匹配指定范围内的任意字符。例如，“<code>[a-z]</code>”可以匹配“<code>a</code>”到“<code>z</code>”范围内的任意小写字母字符。</td>\n</tr>\n<tr>\n<td>[^a-z]</td>\n<td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，“<code>[^a-z]</code>”可以匹配任何不在“<code>a</code>”到“<code>z</code>”范围内的任意字符。</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>匹配一个单词边界，也就是指单词和空格间的位置。例如，“<code>er\\b</code>”可以匹配“<code>never</code>”中的“<code>er</code>”，但不能匹配“<code>verb</code>”中的“<code>er</code>”。</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>匹配非单词边界。“<code>er\\B</code>”能匹配“<code>verb</code>”中的“<code>er</code>”，但不能匹配“<code>never</code>”中的“<code>er</code>”。</td>\n</tr>\n<tr>\n<td>\\cx</td>\n<td>匹配由x指明的控制字符。例如，\\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“<code>c</code>”字符。</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>匹配一个数字字符。等价于[0-9]。</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>匹配一个非数字字符。等价于[^0-9]。</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>匹配一个换页符。等价于\\x0c和\\cL。</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>匹配一个换行符。等价于\\x0a和\\cJ。</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>匹配一个回车符。等价于\\x0d和\\cM。</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>匹配任何非空白字符。等价于[^ \\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>匹配一个制表符。等价于\\x09和\\cI。</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>匹配一个垂直制表符。等价于\\x0b和\\cK。</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>匹配包括下划线的任何单词字符。等价于“<code>[A-Za-z0-9_]</code>”。</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>匹配任何非单词字符。等价于“<code>[^A-Za-z0-9_]</code>”。</td>\n</tr>\n<tr>\n<td>\\xn</td>\n<td>匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“<code>\\x41</code>”匹配“<code>A</code>”。“<code>\\x041</code>”则等价于“<code>\\x04&amp;1</code>”。正则表达式中可以使用ASCII编码。.</td>\n</tr>\n<tr>\n<td>\\num</td>\n<td>匹配num，其中num是一个正整数。对所获取的匹配的引用。例如，“<code>(.)\\1</code>”匹配两个连续的相同字符。</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>标识一个八进制转义值或一个向后引用。如果\\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值。</td>\n</tr>\n<tr>\n<td>\\nm</td>\n<td>标识一个八进制转义值或一个向后引用。如果\\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\\nm将匹配八进制转义值nm。</td>\n</tr>\n<tr>\n<td>\\nml</td>\n<td>如果n为八进制数字（0-3），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。</td>\n</tr>\n<tr>\n<td>\\un</td>\n<td>匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\\u00A9匹配版权符号（©）。</td>\n</tr>\n</tbody></table>\n<h2 id=\"常用正则表达式\"><a href=\"#常用正则表达式\" class=\"headerlink\" title=\"常用正则表达式\"></a>常用正则表达式</h2><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>用户名</td>\n<td>/^[a-z0-9_-]{3,16}$/</td>\n</tr>\n<tr>\n<td>密码</td>\n<td>/^[a-z0-9_-]{6,18}$/</td>\n</tr>\n<tr>\n<td>十六进制值</td>\n<td>/^#?([a-f0-9]{6}|[a-f0-9]{3})$/</td>\n</tr>\n<tr>\n<td>电子邮箱</td>\n<td>/^([a-z0-9_.-]+)@([\\da-z.-]+).([a-z.]{2,6})$/<br>/^[a-z\\d]+(.[a-z\\d]+)*@(<a href=\"-[\\da-z]\">\\da-z</a>?)+(.{1,2}[a-z]+)+$/</td>\n</tr>\n<tr>\n<td>URL</td>\n<td>/^(https?://)?([\\da-z.-]+).([a-z.]{2,6})([/\\w .-]<em>)</em>/?$/</td>\n</tr>\n<tr>\n<td>IP 地址</td>\n<td>/((2[0-4]\\d|25[0-5]|[01]?\\d\\d?).){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)/<br>/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/</td>\n</tr>\n<tr>\n<td>HTML 标签</td>\n<td>/^&lt;([a-z]+)([^&lt;]+)<em>(?:&gt;(.</em>)&lt;/\\1&gt;|\\s+/&gt;)$/</td>\n</tr>\n<tr>\n<td>删除代码\\注释</td>\n<td>(?&lt;!http:|\\S)//.*$</td>\n</tr>\n<tr>\n<td>Unicode编码中的汉字范围</td>\n<td>/^[\\u2E80-\\u9FFF]+$/</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://tool.oschina.net/uploads/apidocs/jquery/regexp.html\" target=\"_blank\" rel=\"noopener\">转自：正则表达式手册</a></p>","more":"<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\</td>\n<td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“<code>n</code>”匹配字符“<code>n</code>”。“<code>\\n</code>”匹配一个换行符。串行“<code>\\\\</code>”匹配“<code>\\</code>”而“<code>\\(</code>”则匹配“<code>(</code>”。</td>\n</tr>\n<tr>\n<td>^</td>\n<td>匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“<code>\\n</code>”或“<code>\\r</code>”之后的位置。</td>\n</tr>\n<tr>\n<td>$</td>\n<td>匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“<code>\\n</code>”或“<code>\\r</code>”之前的位置。</td>\n</tr>\n<tr>\n<td>*</td>\n<td>匹配前面的子表达式零次或多次。例如，zo<em>能匹配“<code>z</code>”以及“<code>zoo</code>”。</em>等价于{0,}。</td>\n</tr>\n<tr>\n<td>+</td>\n<td>匹配前面的子表达式一次或多次。例如，“<code>zo+</code>”能匹配“<code>zo</code>”以及“<code>zoo</code>”，但不能匹配“<code>z</code>”。+等价于{1,}。</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配前面的子表达式零次或一次。例如，“<code>do(es)?</code>”可以匹配“<code>does</code>”或“<code>does</code>”中的“<code>do</code>”。?等价于{0,1}。</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>n是一个非负整数。匹配确定的n次。例如，“<code>o{2}</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但是能匹配“<code>food</code>”中的两个o。</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>n是一个非负整数。至少匹配n次。例如，“<code>o{2,}</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但能匹配“<code>foooood</code>”中的所有o。“<code>o{1,}</code>”等价于“<code>o+</code>”。“<code>o{0,}</code>”则等价于“<code>o*</code>”。</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。例如，“<code>o{1,3}</code>”将匹配“<code>fooooood</code>”中的前三个o。“<code>o{0,1}</code>”等价于“<code>o?</code>”。请注意在逗号和两个数之间不能有空格。</td>\n</tr>\n<tr>\n<td>?</td>\n<td>当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“<code>oooo</code>”，“<code>o+?</code>”将匹配单个“<code>o</code>”，而“<code>o+</code>”将匹配所有“<code>o</code>”。</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配除“<code>\\``n</code>”之外的任何单个字符。要匹配包括“<code>\\``n</code>”在内的任何字符，请使用像“<code>(.|\\n)</code>”的模式。</td>\n</tr>\n<tr>\n<td>(pattern)</td>\n<td>匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“<code>\\(</code>”或“<code>\\)</code>”。</td>\n</tr>\n<tr>\n<td>(?:pattern)</td>\n<td>匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“<code>(|)</code>”来组合一个模式的各个部分是很有用。例如“<code>industr(?:y|ies)</code>”就是一个比“<code>industry|industries</code>”更简略的表达式。</td>\n</tr>\n<tr>\n<td>(?=pattern)</td>\n<td>正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“<code>Windows(?=95|98|NT|2000)</code>”能匹配“<code>Windows2000</code>”中的“<code>Windows</code>”，但不能匹配“<code>Windows3.1</code>”中的“<code>Windows</code>”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>\n</tr>\n<tr>\n<td>(?!pattern)</td>\n<td>正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“<code>Windows(?!95|98|NT|2000)</code>”能匹配“<code>Windows3.1</code>”中的“<code>Windows</code>”，但不能匹配“<code>Windows2000</code>”中的“<code>Windows</code>”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始</td>\n</tr>\n<tr>\n<td>(?&lt;=pattern)</td>\n<td>反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“<code>(?&lt;=95|98|NT|2000)Windows</code>”能匹配“<code>2000Windows</code>”中的“<code>Windows</code>”，但不能匹配“<code>3.1Windows</code>”中的“<code>Windows</code>”。</td>\n</tr>\n<tr>\n<td>(?&lt;!pattern)</td>\n<td>反向否定预查，与正向否定预查类拟，只是方向相反。例如“<code>(?&lt;!95|98|NT|2000)Windows</code>”能匹配“<code>3.1Windows</code>”中的“<code>Windows</code>”，但不能匹配“<code>2000Windows</code>”中的“<code>Windows</code>”。</td>\n</tr>\n<tr>\n<td>x|y</td>\n<td>匹配x或y。例如，“<code>z|food</code>”能匹配“<code>z</code>”或“<code>food</code>”。“<code>(z|f)ood</code>”则匹配“<code>zood</code>”或“<code>food</code>”。</td>\n</tr>\n<tr>\n<td>[xyz]</td>\n<td>字符集合。匹配所包含的任意一个字符。例如，“<code>[abc]</code>”可以匹配“<code>plain</code>”中的“<code>a</code>”。</td>\n</tr>\n<tr>\n<td>[^xyz]</td>\n<td>负值字符集合。匹配未包含的任意字符。例如，“<code>[^abc]</code>”可以匹配“<code>plain</code>”中的“<code>p</code>”。</td>\n</tr>\n<tr>\n<td>[a-z]</td>\n<td>字符范围。匹配指定范围内的任意字符。例如，“<code>[a-z]</code>”可以匹配“<code>a</code>”到“<code>z</code>”范围内的任意小写字母字符。</td>\n</tr>\n<tr>\n<td>[^a-z]</td>\n<td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，“<code>[^a-z]</code>”可以匹配任何不在“<code>a</code>”到“<code>z</code>”范围内的任意字符。</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>匹配一个单词边界，也就是指单词和空格间的位置。例如，“<code>er\\b</code>”可以匹配“<code>never</code>”中的“<code>er</code>”，但不能匹配“<code>verb</code>”中的“<code>er</code>”。</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>匹配非单词边界。“<code>er\\B</code>”能匹配“<code>verb</code>”中的“<code>er</code>”，但不能匹配“<code>never</code>”中的“<code>er</code>”。</td>\n</tr>\n<tr>\n<td>\\cx</td>\n<td>匹配由x指明的控制字符。例如，\\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“<code>c</code>”字符。</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>匹配一个数字字符。等价于[0-9]。</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>匹配一个非数字字符。等价于[^0-9]。</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>匹配一个换页符。等价于\\x0c和\\cL。</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>匹配一个换行符。等价于\\x0a和\\cJ。</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>匹配一个回车符。等价于\\x0d和\\cM。</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>匹配任何非空白字符。等价于[^ \\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>匹配一个制表符。等价于\\x09和\\cI。</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>匹配一个垂直制表符。等价于\\x0b和\\cK。</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>匹配包括下划线的任何单词字符。等价于“<code>[A-Za-z0-9_]</code>”。</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>匹配任何非单词字符。等价于“<code>[^A-Za-z0-9_]</code>”。</td>\n</tr>\n<tr>\n<td>\\xn</td>\n<td>匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“<code>\\x41</code>”匹配“<code>A</code>”。“<code>\\x041</code>”则等价于“<code>\\x04&amp;1</code>”。正则表达式中可以使用ASCII编码。.</td>\n</tr>\n<tr>\n<td>\\num</td>\n<td>匹配num，其中num是一个正整数。对所获取的匹配的引用。例如，“<code>(.)\\1</code>”匹配两个连续的相同字符。</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>标识一个八进制转义值或一个向后引用。如果\\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值。</td>\n</tr>\n<tr>\n<td>\\nm</td>\n<td>标识一个八进制转义值或一个向后引用。如果\\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\\nm将匹配八进制转义值nm。</td>\n</tr>\n<tr>\n<td>\\nml</td>\n<td>如果n为八进制数字（0-3），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。</td>\n</tr>\n<tr>\n<td>\\un</td>\n<td>匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\\u00A9匹配版权符号（©）。</td>\n</tr>\n</tbody></table>\n<h2 id=\"常用正则表达式\"><a href=\"#常用正则表达式\" class=\"headerlink\" title=\"常用正则表达式\"></a>常用正则表达式</h2><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>用户名</td>\n<td>/^[a-z0-9_-]{3,16}$/</td>\n</tr>\n<tr>\n<td>密码</td>\n<td>/^[a-z0-9_-]{6,18}$/</td>\n</tr>\n<tr>\n<td>十六进制值</td>\n<td>/^#?([a-f0-9]{6}|[a-f0-9]{3})$/</td>\n</tr>\n<tr>\n<td>电子邮箱</td>\n<td>/^([a-z0-9_.-]+)@([\\da-z.-]+).([a-z.]{2,6})$/<br>/^[a-z\\d]+(.[a-z\\d]+)*@(<a href=\"-[\\da-z]\">\\da-z</a>?)+(.{1,2}[a-z]+)+$/</td>\n</tr>\n<tr>\n<td>URL</td>\n<td>/^(https?://)?([\\da-z.-]+).([a-z.]{2,6})([/\\w .-]<em>)</em>/?$/</td>\n</tr>\n<tr>\n<td>IP 地址</td>\n<td>/((2[0-4]\\d|25[0-5]|[01]?\\d\\d?).){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)/<br>/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/</td>\n</tr>\n<tr>\n<td>HTML 标签</td>\n<td>/^&lt;([a-z]+)([^&lt;]+)<em>(?:&gt;(.</em>)&lt;/\\1&gt;|\\s+/&gt;)$/</td>\n</tr>\n<tr>\n<td>删除代码\\注释</td>\n<td>(?&lt;!http:|\\S)//.*$</td>\n</tr>\n<tr>\n<td>Unicode编码中的汉字范围</td>\n<td>/^[\\u2E80-\\u9FFF]+$/</td>\n</tr>\n</tbody></table>"},{"title":"go-Hello World","date":"2020-06-17T10:01:33.541Z","comments":1,"_content":"\n```go\npackage main // 包，声明代码所在的木块\n\nimport \"fmt\" //引入代码依赖\n\nfunc main(){ // 功能实现\n\tfmt.Println(\"hello world\")\n}\n```\n<!--more-->\n> 应用程序入口\n\n* 必须是main包\n* 必须是main方法\n* 文件名不一定是main.go\n\n\n **与其他语言的差异**\n\n> 退出返回值\n\n* go 中main函数不支持任何返回值\n* 通过 os.exit来返回状态\n\n> 获取命令行参数\n\n* main函数不支持传入参数\n\n```\nfunc main(arg [] string)\n```\n\n* 在程序中直接通过 os.Args 获取命令行参数\n","source":"_posts/go-hello-world.md","raw":"---\ntitle: go-Hello World\ndate: 2020年6月16日\ncomments: true\ncategories: go\ntags:\n---\n\n```go\npackage main // 包，声明代码所在的木块\n\nimport \"fmt\" //引入代码依赖\n\nfunc main(){ // 功能实现\n\tfmt.Println(\"hello world\")\n}\n```\n<!--more-->\n> 应用程序入口\n\n* 必须是main包\n* 必须是main方法\n* 文件名不一定是main.go\n\n\n **与其他语言的差异**\n\n> 退出返回值\n\n* go 中main函数不支持任何返回值\n* 通过 os.exit来返回状态\n\n> 获取命令行参数\n\n* main函数不支持传入参数\n\n```\nfunc main(arg [] string)\n```\n\n* 在程序中直接通过 os.Args 获取命令行参数\n","slug":"go-hello-world","published":1,"updated":"2020-06-17T10:01:33.541Z","layout":"post","photos":[],"link":"","_id":"ckblkjn7g000w0tpc9vigjbkp","content":"<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main <span class=\"comment\">// 包，声明代码所在的木块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span> <span class=\"comment\">//引入代码依赖</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123; <span class=\"comment\">// 功能实现</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n<blockquote>\n<p>应用程序入口</p>\n</blockquote>\n<ul>\n<li>必须是main包</li>\n<li>必须是main方法</li>\n<li>文件名不一定是main.go</li>\n</ul>\n<p> <strong>与其他语言的差异</strong></p>\n<blockquote>\n<p>退出返回值</p>\n</blockquote>\n<ul>\n<li>go 中main函数不支持任何返回值</li>\n<li>通过 os.exit来返回状态</li>\n</ul>\n<blockquote>\n<p>获取命令行参数</p>\n</blockquote>\n<ul>\n<li>main函数不支持传入参数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func main(arg [] string)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在程序中直接通过 os.Args 获取命令行参数</li>\n</ul>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main <span class=\"comment\">// 包，声明代码所在的木块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span> <span class=\"comment\">//引入代码依赖</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123; <span class=\"comment\">// 功能实现</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<blockquote>\n<p>应用程序入口</p>\n</blockquote>\n<ul>\n<li>必须是main包</li>\n<li>必须是main方法</li>\n<li>文件名不一定是main.go</li>\n</ul>\n<p> <strong>与其他语言的差异</strong></p>\n<blockquote>\n<p>退出返回值</p>\n</blockquote>\n<ul>\n<li>go 中main函数不支持任何返回值</li>\n<li>通过 os.exit来返回状态</li>\n</ul>\n<blockquote>\n<p>获取命令行参数</p>\n</blockquote>\n<ul>\n<li>main函数不支持传入参数</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func main(arg [] string)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在程序中直接通过 os.Args 获取命令行参数</li>\n</ul>"},{"title":"centos 安装 docker","date":"2020-06-19T07:35:09.628Z","comments":1,"_content":"\ndocker 是一种开源容器化技术，用于构建和容器化应用程序\n\n<!--more-->\n\n# centos 安装 docker\n\n## 安装yum-utils\n\n```bash\nyum install -y yum-utils\n```\n\n## 设置存储库\n\n    自行选择源\n\n```bash\n## 官方源\nyum-config-manager \\\n--add-repo \\\nhttps://download.docker.com/linux/centos/docker-ce.repo\n\n## 阿里云\nyum-config-manager \\\n--add-repo \\\nhttp://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n\n## 安装 docker\n\n```bash\nyum install docker-ce docker-ce-cli containerd.io\n```\n\n## 启动 docker\n\n```bash\nsystemctl start docker\n```\n\n    运行 hello-world 验证是否安装成功\n\n```bash\ndocker run hello-world\n```\n\n\n\n## 参考官方文档\n\n[Install Docker Engine on CentOS | Docker Documentation](https://docs.docker.com/engine/install/centos/)\n","source":"_posts/centos安装docker.md","raw":"---\ntitle: centos 安装 docker\ndate: 2020年6月19日\ncomments: true\ncategories: linux\ntags:\n- docker\n---\n\ndocker 是一种开源容器化技术，用于构建和容器化应用程序\n\n<!--more-->\n\n# centos 安装 docker\n\n## 安装yum-utils\n\n```bash\nyum install -y yum-utils\n```\n\n## 设置存储库\n\n    自行选择源\n\n```bash\n## 官方源\nyum-config-manager \\\n--add-repo \\\nhttps://download.docker.com/linux/centos/docker-ce.repo\n\n## 阿里云\nyum-config-manager \\\n--add-repo \\\nhttp://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n\n## 安装 docker\n\n```bash\nyum install docker-ce docker-ce-cli containerd.io\n```\n\n## 启动 docker\n\n```bash\nsystemctl start docker\n```\n\n    运行 hello-world 验证是否安装成功\n\n```bash\ndocker run hello-world\n```\n\n\n\n## 参考官方文档\n\n[Install Docker Engine on CentOS | Docker Documentation](https://docs.docker.com/engine/install/centos/)\n","slug":"centos安装docker","published":1,"updated":"2020-06-19T07:35:09.629Z","layout":"post","photos":[],"link":"","_id":"ckbm1hf6b00000jpc28e6pzq1","content":"<p>docker 是一种开源容器化技术，用于构建和容器化应用程序</p>\n<a id=\"more\"></a>\n\n<h1 id=\"centos-安装-docker\"><a href=\"#centos-安装-docker\" class=\"headerlink\" title=\"centos 安装 docker\"></a>centos 安装 docker</h1><h2 id=\"安装yum-utils\"><a href=\"#安装yum-utils\" class=\"headerlink\" title=\"安装yum-utils\"></a>安装yum-utils</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y yum-utils</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置存储库\"><a href=\"#设置存储库\" class=\"headerlink\" title=\"设置存储库\"></a>设置存储库</h2><pre><code>自行选择源</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 官方源</span></span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">--add-repo \\</span><br><span class=\"line\">https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 阿里云</span></span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">--add-repo \\</span><br><span class=\"line\">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-docker\"><a href=\"#安装-docker\" class=\"headerlink\" title=\"安装 docker\"></a>安装 docker</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动-docker\"><a href=\"#启动-docker\" class=\"headerlink\" title=\"启动 docker\"></a>启动 docker</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start docker</span><br></pre></td></tr></table></figure>\n\n<pre><code>运行 hello-world 验证是否安装成功</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考官方文档\"><a href=\"#参考官方文档\" class=\"headerlink\" title=\"参考官方文档\"></a>参考官方文档</h2><p><a href=\"https://docs.docker.com/engine/install/centos/\" target=\"_blank\" rel=\"noopener\">Install Docker Engine on CentOS | Docker Documentation</a></p>\n","site":{"data":{}},"excerpt":"<p>docker 是一种开源容器化技术，用于构建和容器化应用程序</p>","more":"<h1 id=\"centos-安装-docker\"><a href=\"#centos-安装-docker\" class=\"headerlink\" title=\"centos 安装 docker\"></a>centos 安装 docker</h1><h2 id=\"安装yum-utils\"><a href=\"#安装yum-utils\" class=\"headerlink\" title=\"安装yum-utils\"></a>安装yum-utils</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y yum-utils</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置存储库\"><a href=\"#设置存储库\" class=\"headerlink\" title=\"设置存储库\"></a>设置存储库</h2><pre><code>自行选择源</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 官方源</span></span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">--add-repo \\</span><br><span class=\"line\">https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 阿里云</span></span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">--add-repo \\</span><br><span class=\"line\">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-docker\"><a href=\"#安装-docker\" class=\"headerlink\" title=\"安装 docker\"></a>安装 docker</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动-docker\"><a href=\"#启动-docker\" class=\"headerlink\" title=\"启动 docker\"></a>启动 docker</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start docker</span><br></pre></td></tr></table></figure>\n\n<pre><code>运行 hello-world 验证是否安装成功</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考官方文档\"><a href=\"#参考官方文档\" class=\"headerlink\" title=\"参考官方文档\"></a>参考官方文档</h2><p><a href=\"https://docs.docker.com/engine/install/centos/\" target=\"_blank\" rel=\"noopener\">Install Docker Engine on CentOS | Docker Documentation</a></p>"},{"title":"docker-compose安装与使用","date":"2020-06-19T08:22:27.692Z","comments":1,"_content":"\n# docker-compose安装与使用\n\n    Compose是用于定义和运行多容器Docker应用程序的工具。通过Compose，您可以使用YAML文件来配置应用程序的服务。然后，使用一个命令，就可以从配置中创建并启动所有服务.\n\n<!--more-->\n\n## 前置条件\n\n肯定是需要安装docker了。。。\n\n## docker-compose 安装\n\n1. 运行以下命令以下载Docker Compose的当前稳定版本:\n\n```bash\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.26.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n```\n\n2. 将可执行权限应用于 docker-compose 二进制文件\n\n```bash\nsudo chmod +x /usr/local/bin/docker-compose\n```\n\n3. 测试安装\n\n```bash\ndocker-compose --version\n```\n\n## 简单使用\n\n1. 编写 docker-compose.yml 文件，如下所示：（这是一个网易云音乐客户端无版权代理到其他平台的小工具，推荐！）\n\n```yml\n  1 version: '3'\n  2 \n  3 services:\n  4   unblockneteasemusic:\n  5     image: nondanee/unblockneteasemusic\n  6     container_name: neteasemusic\n  7     restart: always\n  8     environment:\n  9       NODE_ENV: production\n 10     command: -p 2233\n 11     ports:\n 12       - 2233:2233\n```\n\n2. docker-compose up -d\n","source":"_posts/docker-compose安装与使用.md","raw":"---\ntitle: docker-compose安装与使用\ndate: 2020年6月19日\ncomments: true\ncategories: linux\ntags:\n- docker\n---\n\n# docker-compose安装与使用\n\n    Compose是用于定义和运行多容器Docker应用程序的工具。通过Compose，您可以使用YAML文件来配置应用程序的服务。然后，使用一个命令，就可以从配置中创建并启动所有服务.\n\n<!--more-->\n\n## 前置条件\n\n肯定是需要安装docker了。。。\n\n## docker-compose 安装\n\n1. 运行以下命令以下载Docker Compose的当前稳定版本:\n\n```bash\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.26.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n```\n\n2. 将可执行权限应用于 docker-compose 二进制文件\n\n```bash\nsudo chmod +x /usr/local/bin/docker-compose\n```\n\n3. 测试安装\n\n```bash\ndocker-compose --version\n```\n\n## 简单使用\n\n1. 编写 docker-compose.yml 文件，如下所示：（这是一个网易云音乐客户端无版权代理到其他平台的小工具，推荐！）\n\n```yml\n  1 version: '3'\n  2 \n  3 services:\n  4   unblockneteasemusic:\n  5     image: nondanee/unblockneteasemusic\n  6     container_name: neteasemusic\n  7     restart: always\n  8     environment:\n  9       NODE_ENV: production\n 10     command: -p 2233\n 11     ports:\n 12       - 2233:2233\n```\n\n2. docker-compose up -d\n","slug":"docker-compose安装与使用","published":1,"updated":"2020-06-19T08:22:27.693Z","layout":"post","photos":[],"link":"","_id":"ckbm1hf6f00010jpcfxr73x7y","content":"<h1 id=\"docker-compose安装与使用\"><a href=\"#docker-compose安装与使用\" class=\"headerlink\" title=\"docker-compose安装与使用\"></a>docker-compose安装与使用</h1><pre><code>Compose是用于定义和运行多容器Docker应用程序的工具。通过Compose，您可以使用YAML文件来配置应用程序的服务。然后，使用一个命令，就可以从配置中创建并启动所有服务.</code></pre><a id=\"more\"></a>\n\n<h2 id=\"前置条件\"><a href=\"#前置条件\" class=\"headerlink\" title=\"前置条件\"></a>前置条件</h2><p>肯定是需要安装docker了。。。</p>\n<h2 id=\"docker-compose-安装\"><a href=\"#docker-compose-安装\" class=\"headerlink\" title=\"docker-compose 安装\"></a>docker-compose 安装</h2><ol>\n<li>运行以下命令以下载Docker Compose的当前稳定版本:</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo curl -L <span class=\"string\">\"https://github.com/docker/compose/releases/download/1.26.0/docker-compose-<span class=\"variable\">$(uname -s)</span>-<span class=\"variable\">$(uname -m)</span>\"</span> -o /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>将可执行权限应用于 docker-compose 二进制文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod +x /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>测试安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose --version</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><ol>\n<li>编写 docker-compose.yml 文件，如下所示：（这是一个网易云音乐客户端无版权代理到其他平台的小工具，推荐！）</li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"attr\">1 version:</span> <span class=\"string\">'3'</span></span><br><span class=\"line\"> <span class=\"number\">2</span> </span><br><span class=\"line\"> <span class=\"attr\">3 services:</span></span><br><span class=\"line\"> <span class=\"attr\">4   unblockneteasemusic:</span></span><br><span class=\"line\"> <span class=\"attr\">5     image:</span> <span class=\"string\">nondanee/unblockneteasemusic</span></span><br><span class=\"line\"> <span class=\"attr\">6     container_name:</span> <span class=\"string\">neteasemusic</span></span><br><span class=\"line\"> <span class=\"attr\">7     restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"> <span class=\"attr\">8     environment:</span></span><br><span class=\"line\"> <span class=\"attr\">9       NODE_ENV:</span> <span class=\"string\">production</span></span><br><span class=\"line\"><span class=\"attr\">10     command:</span> <span class=\"string\">-p</span> <span class=\"number\">2233</span></span><br><span class=\"line\"><span class=\"attr\">11     ports:</span></span><br><span class=\"line\"><span class=\"number\">12</span>       <span class=\"bullet\">-</span> <span class=\"number\">2233</span><span class=\"string\">:2233</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>docker-compose up -d</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"docker-compose安装与使用\"><a href=\"#docker-compose安装与使用\" class=\"headerlink\" title=\"docker-compose安装与使用\"></a>docker-compose安装与使用</h1><pre><code>Compose是用于定义和运行多容器Docker应用程序的工具。通过Compose，您可以使用YAML文件来配置应用程序的服务。然后，使用一个命令，就可以从配置中创建并启动所有服务.</code></pre>","more":"<h2 id=\"前置条件\"><a href=\"#前置条件\" class=\"headerlink\" title=\"前置条件\"></a>前置条件</h2><p>肯定是需要安装docker了。。。</p>\n<h2 id=\"docker-compose-安装\"><a href=\"#docker-compose-安装\" class=\"headerlink\" title=\"docker-compose 安装\"></a>docker-compose 安装</h2><ol>\n<li>运行以下命令以下载Docker Compose的当前稳定版本:</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo curl -L <span class=\"string\">\"https://github.com/docker/compose/releases/download/1.26.0/docker-compose-<span class=\"variable\">$(uname -s)</span>-<span class=\"variable\">$(uname -m)</span>\"</span> -o /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>将可执行权限应用于 docker-compose 二进制文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod +x /usr/<span class=\"built_in\">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>测试安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose --version</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><ol>\n<li>编写 docker-compose.yml 文件，如下所示：（这是一个网易云音乐客户端无版权代理到其他平台的小工具，推荐！）</li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"attr\">1 version:</span> <span class=\"string\">'3'</span></span><br><span class=\"line\"> <span class=\"number\">2</span> </span><br><span class=\"line\"> <span class=\"attr\">3 services:</span></span><br><span class=\"line\"> <span class=\"attr\">4   unblockneteasemusic:</span></span><br><span class=\"line\"> <span class=\"attr\">5     image:</span> <span class=\"string\">nondanee/unblockneteasemusic</span></span><br><span class=\"line\"> <span class=\"attr\">6     container_name:</span> <span class=\"string\">neteasemusic</span></span><br><span class=\"line\"> <span class=\"attr\">7     restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"> <span class=\"attr\">8     environment:</span></span><br><span class=\"line\"> <span class=\"attr\">9       NODE_ENV:</span> <span class=\"string\">production</span></span><br><span class=\"line\"><span class=\"attr\">10     command:</span> <span class=\"string\">-p</span> <span class=\"number\">2233</span></span><br><span class=\"line\"><span class=\"attr\">11     ports:</span></span><br><span class=\"line\"><span class=\"number\">12</span>       <span class=\"bullet\">-</span> <span class=\"number\">2233</span><span class=\"string\">:2233</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>docker-compose up -d</li>\n</ol>"},{"title":"hexo博客框架-安装","date":"2020-06-19T09:03:42.017Z","comments":1,"_content":"\n    hexo 是一个快速、简洁且高效的博客框架。hexo使用Markdown解析文章，在几秒内，即可利用靓丽的主题生成静态网页.\n\n<!--more-->\n\n## 方式一： 参考官方文档\n\n* 安装前提\n  \n  > 1. node.js > 8.10,建议10.0+版本\n  > 2. Git \n\n* 安装 hexo\n\n```bash\nnpm install -g hexo-cli\n```\n\n* 初始化 hexo\n\n```bash\n$ hexo init blog\n$ cd blog\n$ hexo install\n```\n\n* 启动 hexo\n\n```bash\n$ hexo server\n```\n\n访问 ip:4000即可看到\n\n![UTOOLS1592555022132.png](https://user-gold-cdn.xitu.io/2020/6/19/172cbad2f1f7a4af?w=1885&h=988&f=png&s=530336)\n\n## 方式二：docker部署\n\n1. 编写 docker-compose.yml\n\n```yml\n 24   blog:\n 25     image: zeusro/hexo\n 26     container_name: blog\n 27     restart: always\n 28     ports:\n 29       - 4000:4000\n```\n\n执行`docker-compose up -d`，可以访问到了，下一步目录挂载\n\n2. 挂载目录\n* /data/blog 是我存放的目录，我是整个目录挂载，可根据需求，自行变更\n  \n   执行 ` docker exec blog ls / ` 可以看到，需要挂载的目录是 docker-hexo \n  \n   ![UTOOLS1592555337252.png](https://user-gold-cdn.xitu.io/2020/6/19/172cbb1fb6041a85?w=645&h=408&f=png&s=11908)\n\n先将 容器里的 hexo 文件复制出来 `docker cp blog:/docker-hexo .`，这是复制到当前目录\n\n\n\n> 命令解释： docker cp 容器:需要复制的目录 宿主机目录\n\n\n\n最终yml如下：\n\n```yml\n 24   blog:\n 25     image: zeusro/hexo\n 26     container_name: blog\n 27     restart: always\n 28     ports:\n 29       - 4000:4000\n 30     volumes:\n 31       - /data/blog:/docker-hexo\n```\n\n2. docker-compose up -d\n\n3. 访问ip:4000，效果同上\n\n// TODO 主题修改，自行参考官方文档\n\n[文档 | Hexo](https://hexo.io/zh-cn/docs/)\n","source":"_posts/hexo博客框架-安装.md","raw":"---\ntitle: hexo博客框架-安装\ndate: 2020年6月19日\ncomments: true\ncategories: \ntags:\n- hexo\n---\n\n    hexo 是一个快速、简洁且高效的博客框架。hexo使用Markdown解析文章，在几秒内，即可利用靓丽的主题生成静态网页.\n\n<!--more-->\n\n## 方式一： 参考官方文档\n\n* 安装前提\n  \n  > 1. node.js > 8.10,建议10.0+版本\n  > 2. Git \n\n* 安装 hexo\n\n```bash\nnpm install -g hexo-cli\n```\n\n* 初始化 hexo\n\n```bash\n$ hexo init blog\n$ cd blog\n$ hexo install\n```\n\n* 启动 hexo\n\n```bash\n$ hexo server\n```\n\n访问 ip:4000即可看到\n\n![UTOOLS1592555022132.png](https://user-gold-cdn.xitu.io/2020/6/19/172cbad2f1f7a4af?w=1885&h=988&f=png&s=530336)\n\n## 方式二：docker部署\n\n1. 编写 docker-compose.yml\n\n```yml\n 24   blog:\n 25     image: zeusro/hexo\n 26     container_name: blog\n 27     restart: always\n 28     ports:\n 29       - 4000:4000\n```\n\n执行`docker-compose up -d`，可以访问到了，下一步目录挂载\n\n2. 挂载目录\n* /data/blog 是我存放的目录，我是整个目录挂载，可根据需求，自行变更\n  \n   执行 ` docker exec blog ls / ` 可以看到，需要挂载的目录是 docker-hexo \n  \n   ![UTOOLS1592555337252.png](https://user-gold-cdn.xitu.io/2020/6/19/172cbb1fb6041a85?w=645&h=408&f=png&s=11908)\n\n先将 容器里的 hexo 文件复制出来 `docker cp blog:/docker-hexo .`，这是复制到当前目录\n\n\n\n> 命令解释： docker cp 容器:需要复制的目录 宿主机目录\n\n\n\n最终yml如下：\n\n```yml\n 24   blog:\n 25     image: zeusro/hexo\n 26     container_name: blog\n 27     restart: always\n 28     ports:\n 29       - 4000:4000\n 30     volumes:\n 31       - /data/blog:/docker-hexo\n```\n\n2. docker-compose up -d\n\n3. 访问ip:4000，效果同上\n\n// TODO 主题修改，自行参考官方文档\n\n[文档 | Hexo](https://hexo.io/zh-cn/docs/)\n","slug":"hexo博客框架-安装","published":1,"updated":"2020-06-19T09:03:42.017Z","layout":"post","photos":[],"link":"","_id":"ckbm1hf6l00040jpcyxud6jbz","content":"<pre><code>hexo 是一个快速、简洁且高效的博客框架。hexo使用Markdown解析文章，在几秒内，即可利用靓丽的主题生成静态网页.</code></pre><a id=\"more\"></a>\n\n<h2 id=\"方式一：-参考官方文档\"><a href=\"#方式一：-参考官方文档\" class=\"headerlink\" title=\"方式一： 参考官方文档\"></a>方式一： 参考官方文档</h2><ul>\n<li><p>安装前提</p>\n<blockquote>\n<ol>\n<li>node.js &gt; 8.10,建议10.0+版本</li>\n<li>Git </li>\n</ol>\n</blockquote>\n</li>\n<li><p>安装 hexo</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>初始化 hexo</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init blog</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">$ hexo install</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动 hexo</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>访问 ip:4000即可看到</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/6/19/172cbad2f1f7a4af?w=1885&h=988&f=png&s=530336\" alt=\"UTOOLS1592555022132.png\"></p>\n<h2 id=\"方式二：docker部署\"><a href=\"#方式二：docker部署\" class=\"headerlink\" title=\"方式二：docker部署\"></a>方式二：docker部署</h2><ol>\n<li>编写 docker-compose.yml</li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">24   blog:</span></span><br><span class=\"line\"><span class=\"attr\">25     image:</span> <span class=\"string\">zeusro/hexo</span></span><br><span class=\"line\"><span class=\"attr\">26     container_name:</span> <span class=\"string\">blog</span></span><br><span class=\"line\"><span class=\"attr\">27     restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">28     ports:</span></span><br><span class=\"line\"><span class=\"number\">29</span>       <span class=\"bullet\">-</span> <span class=\"number\">4000</span><span class=\"string\">:4000</span></span><br></pre></td></tr></table></figure>\n\n<p>执行<code>docker-compose up -d</code>，可以访问到了，下一步目录挂载</p>\n<ol start=\"2\">\n<li>挂载目录</li>\n</ol>\n<ul>\n<li><p>/data/blog 是我存放的目录，我是整个目录挂载，可根据需求，自行变更</p>\n<p> 执行 <code>docker exec blog ls /</code> 可以看到，需要挂载的目录是 docker-hexo </p>\n<p> <img src=\"https://user-gold-cdn.xitu.io/2020/6/19/172cbb1fb6041a85?w=645&h=408&f=png&s=11908\" alt=\"UTOOLS1592555337252.png\"></p>\n</li>\n</ul>\n<p>先将 容器里的 hexo 文件复制出来 <code>docker cp blog:/docker-hexo .</code>，这是复制到当前目录</p>\n<blockquote>\n<p>命令解释： docker cp 容器:需要复制的目录 宿主机目录</p>\n</blockquote>\n<p>最终yml如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">24   blog:</span></span><br><span class=\"line\"><span class=\"attr\">25     image:</span> <span class=\"string\">zeusro/hexo</span></span><br><span class=\"line\"><span class=\"attr\">26     container_name:</span> <span class=\"string\">blog</span></span><br><span class=\"line\"><span class=\"attr\">27     restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">28     ports:</span></span><br><span class=\"line\"><span class=\"number\">29</span>       <span class=\"bullet\">-</span> <span class=\"number\">4000</span><span class=\"string\">:4000</span></span><br><span class=\"line\"><span class=\"attr\">30     volumes:</span></span><br><span class=\"line\"><span class=\"number\">31</span>       <span class=\"bullet\">-</span> <span class=\"string\">/data/blog:/docker-hexo</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>docker-compose up -d</p>\n</li>\n<li><p>访问ip:4000，效果同上</p>\n</li>\n</ol>\n<p>// TODO 主题修改，自行参考官方文档</p>\n<p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">文档 | Hexo</a></p>\n","site":{"data":{}},"excerpt":"<pre><code>hexo 是一个快速、简洁且高效的博客框架。hexo使用Markdown解析文章，在几秒内，即可利用靓丽的主题生成静态网页.</code></pre>","more":"<h2 id=\"方式一：-参考官方文档\"><a href=\"#方式一：-参考官方文档\" class=\"headerlink\" title=\"方式一： 参考官方文档\"></a>方式一： 参考官方文档</h2><ul>\n<li><p>安装前提</p>\n<blockquote>\n<ol>\n<li>node.js &gt; 8.10,建议10.0+版本</li>\n<li>Git </li>\n</ol>\n</blockquote>\n</li>\n<li><p>安装 hexo</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>初始化 hexo</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init blog</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> blog</span><br><span class=\"line\">$ hexo install</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动 hexo</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>访问 ip:4000即可看到</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/6/19/172cbad2f1f7a4af?w=1885&h=988&f=png&s=530336\" alt=\"UTOOLS1592555022132.png\"></p>\n<h2 id=\"方式二：docker部署\"><a href=\"#方式二：docker部署\" class=\"headerlink\" title=\"方式二：docker部署\"></a>方式二：docker部署</h2><ol>\n<li>编写 docker-compose.yml</li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">24   blog:</span></span><br><span class=\"line\"><span class=\"attr\">25     image:</span> <span class=\"string\">zeusro/hexo</span></span><br><span class=\"line\"><span class=\"attr\">26     container_name:</span> <span class=\"string\">blog</span></span><br><span class=\"line\"><span class=\"attr\">27     restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">28     ports:</span></span><br><span class=\"line\"><span class=\"number\">29</span>       <span class=\"bullet\">-</span> <span class=\"number\">4000</span><span class=\"string\">:4000</span></span><br></pre></td></tr></table></figure>\n\n<p>执行<code>docker-compose up -d</code>，可以访问到了，下一步目录挂载</p>\n<ol start=\"2\">\n<li>挂载目录</li>\n</ol>\n<ul>\n<li><p>/data/blog 是我存放的目录，我是整个目录挂载，可根据需求，自行变更</p>\n<p> 执行 <code>docker exec blog ls /</code> 可以看到，需要挂载的目录是 docker-hexo </p>\n<p> <img src=\"https://user-gold-cdn.xitu.io/2020/6/19/172cbb1fb6041a85?w=645&h=408&f=png&s=11908\" alt=\"UTOOLS1592555337252.png\"></p>\n</li>\n</ul>\n<p>先将 容器里的 hexo 文件复制出来 <code>docker cp blog:/docker-hexo .</code>，这是复制到当前目录</p>\n<blockquote>\n<p>命令解释： docker cp 容器:需要复制的目录 宿主机目录</p>\n</blockquote>\n<p>最终yml如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">24   blog:</span></span><br><span class=\"line\"><span class=\"attr\">25     image:</span> <span class=\"string\">zeusro/hexo</span></span><br><span class=\"line\"><span class=\"attr\">26     container_name:</span> <span class=\"string\">blog</span></span><br><span class=\"line\"><span class=\"attr\">27     restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\"><span class=\"attr\">28     ports:</span></span><br><span class=\"line\"><span class=\"number\">29</span>       <span class=\"bullet\">-</span> <span class=\"number\">4000</span><span class=\"string\">:4000</span></span><br><span class=\"line\"><span class=\"attr\">30     volumes:</span></span><br><span class=\"line\"><span class=\"number\">31</span>       <span class=\"bullet\">-</span> <span class=\"string\">/data/blog:/docker-hexo</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>docker-compose up -d</p>\n</li>\n<li><p>访问ip:4000，效果同上</p>\n</li>\n</ol>\n<p>// TODO 主题修改，自行参考官方文档</p>\n<p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">文档 | Hexo</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckblkjn6a00070tpc48lm0z1l","category_id":"ckblkjn6100040tpcaw18c6o3","_id":"ckblkjn6o000c0tpc6zpk62ox"},{"post_id":"ckblkjn5u00010tpce5suvjqs","category_id":"ckblkjn6100040tpcaw18c6o3","_id":"ckblkjn6q000f0tpcj75l12pl"},{"post_id":"ckblkjn6k00080tpce4xdgqr8","category_id":"ckblkjn6100040tpcaw18c6o3","_id":"ckblkjn6s000h0tpcpfxss7c7"},{"post_id":"ckblkjn6m000a0tpcwwmgqtp2","category_id":"ckblkjn6100040tpcaw18c6o3","_id":"ckblkjn6u000l0tpckbgjycwm"},{"post_id":"ckblkjn5z00030tpcrc9s4mzy","category_id":"ckblkjn6100040tpcaw18c6o3","_id":"ckblkjn6u000m0tpcgff2ajyb"},{"post_id":"ckblkjn6o000b0tpc2mwkck1n","category_id":"ckblkjn6100040tpcaw18c6o3","_id":"ckblkjn6v000n0tpc46iqad89"},{"post_id":"ckblkjn6400060tpchewv4qhn","category_id":"ckblkjn6100040tpcaw18c6o3","_id":"ckblkjn6v000p0tpcjeirkgg8"},{"post_id":"ckblkjn6r000g0tpc78eyeni7","category_id":"ckblkjn6100040tpcaw18c6o3","_id":"ckblkjn6v000q0tpckpegymhl"},{"post_id":"ckblkjn6t000k0tpcka95fybo","category_id":"ckblkjn6100040tpcaw18c6o3","_id":"ckblkjn6v000r0tpckkw1hb33"},{"post_id":"ckblkjn6p000e0tpc0rmiq1m9","category_id":"ckblkjn6s000i0tpc4jmr2wo5","_id":"ckblkjn6v000s0tpc1majamph"},{"post_id":"ckblkjn7c000t0tpcjlkorufk","category_id":"ckblkjn6s000i0tpc4jmr2wo5","_id":"ckblkjn7h000x0tpcfssvyxwa"},{"post_id":"ckblkjn7g000w0tpc9vigjbkp","category_id":"ckblkjn6100040tpcaw18c6o3","_id":"ckblkjn7i00100tpc2648wpy2"},{"post_id":"ckbm1hf6b00000jpc28e6pzq1","category_id":"ckbm1hf6h00020jpc8k9g0a7t","_id":"ckbm1hf6r00080jpcnsfbbjuj"},{"post_id":"ckbm1hf6f00010jpcfxr73x7y","category_id":"ckbm1hf6h00020jpc8k9g0a7t","_id":"ckbm1hf6s000b0jpcdymuzvmg"}],"PostTag":[{"post_id":"ckblkjn6p000e0tpc0rmiq1m9","tag_id":"ckblkjn6t000j0tpc539waf94","_id":"ckblkjn6v000o0tpc9zd6m41w"},{"post_id":"ckblkjn7c000t0tpcjlkorufk","tag_id":"ckblkjn7g000v0tpcu5mt6de0","_id":"ckblkjn7i000z0tpcymf7e17x"},{"post_id":"ckblkjn7d000u0tpct0nc78yj","tag_id":"ckblkjn7i000y0tpc6a5ut80d","_id":"ckblkjn7i00110tpcocul7am3"},{"post_id":"ckbm1hf6b00000jpc28e6pzq1","tag_id":"ckbm1hf6l00030jpcc6ttpg67","_id":"ckbm1hf6q00070jpct4493fh1"},{"post_id":"ckbm1hf6f00010jpcfxr73x7y","tag_id":"ckbm1hf6l00030jpcc6ttpg67","_id":"ckbm1hf6r000a0jpcbjiwox21"},{"post_id":"ckbm1hf6l00040jpcyxud6jbz","tag_id":"ckbm1hf6r00090jpcyli3i1g1","_id":"ckbm1hf6s000c0jpccz9hjbrb"}],"Tag":[{"name":"二维码","_id":"ckblkjn6t000j0tpc539waf94"},{"name":"微信开发","_id":"ckblkjn7g000v0tpcu5mt6de0"},{"name":"正则表达式","_id":"ckblkjn7i000y0tpc6a5ut80d"},{"name":"docker","_id":"ckbm1hf6l00030jpcc6ttpg67"},{"name":"hexo","_id":"ckbm1hf6r00090jpcyli3i1g1"}]}}